[
  {
    "id": "card-01",
    "name": "Pricing Cards",
    "description": "",
    "category": "cards",
    "type": "block",
    "updatedAt": "2025-10-25T17:09:40.233Z",
    "files": [
      {
        "name": "data.ts",
        "path": "data.ts",
        "content": "export interface PricingFeature {\n  name: string;\n  included: boolean;\n}\n\nexport interface PricingPlan {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  period: string;\n  features: PricingFeature[];\n  buttonText: string;\n  popular?: boolean;\n}\n\nexport const pricingPlans: PricingPlan[] = [\n  {\n    id: \"starter\",\n    name: \"Starter\",\n    description: \"Perfect for individuals and small projects\",\n    price: 9,\n    period: \"month\",\n    buttonText: \"Get Started\",\n    features: [\n      { name: \"Up to 5 projects\", included: true },\n      { name: \"10GB storage\", included: true },\n      { name: \"Basic support\", included: true },\n      { name: \"API access\", included: false },\n      { name: \"Advanced analytics\", included: false },\n      { name: \"Priority support\", included: false },\n    ],\n  },\n  {\n    id: \"professional\",\n    name: \"Professional\",\n    description: \"Best for growing teams and businesses\",\n    price: 29,\n    period: \"month\",\n    buttonText: \"Start Free Trial\",\n    popular: true,\n    features: [\n      { name: \"Unlimited projects\", included: true },\n      { name: \"100GB storage\", included: true },\n      { name: \"Priority support\", included: true },\n      { name: \"API access\", included: true },\n      { name: \"Advanced analytics\", included: true },\n      { name: \"Custom integrations\", included: false },\n    ],\n  },\n  {\n    id: \"enterprise\",\n    name: \"Enterprise\",\n    description: \"For large organizations with custom needs\",\n    price: 99,\n    period: \"month\",\n    buttonText: \"Contact Sales\",\n    features: [\n      { name: \"Unlimited everything\", included: true },\n      { name: \"1TB storage\", included: true },\n      { name: \"24/7 dedicated support\", included: true },\n      { name: \"Full API access\", included: true },\n      { name: \"Advanced analytics\", included: true },\n      { name: \"Custom integrations\", included: true },\n    ],\n  },\n];\n",
        "language": "typescript"
      },
      {
        "name": "meta.json",
        "path": "meta.json",
        "content": "{\n  \"name\": \"Pricing Cards\",\n  \"category\": \"cards\"\n}\n",
        "language": "json"
      },
      {
        "name": "page.tsx",
        "path": "page.tsx",
        "content": "import { CheckIcon, StarIcon, XIcon } from \"lucide-react\";\nimport {\n  Button,\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  cn,\n} from \"@nui/core\";\n\nimport { pricingPlans, type PricingPlan } from \"./data\";\n\ninterface PricingCardProps {\n  plan: PricingPlan;\n  isPopular?: boolean;\n  className?: string;\n}\n\nfunction PricingCard({ plan, isPopular, className }: PricingCardProps) {\n  return (\n    <Card\n      className={cn(\n        \"relative overflow-hidden\",\n        isPopular && \"border-primary shadow-lg scale-105\",\n        className,\n      )}\n    >\n      {isPopular && (\n        <div className=\"absolute top-0 left-0 right-0\">\n          <div className=\"bg-primary text-primary-foreground text-center py-2 text-sm font-medium\">\n            <StarIcon className=\"inline size-4 mr-1\" />\n            Most Popular\n          </div>\n        </div>\n      )}\n\n      <CardHeader className={cn(\"text-center\", isPopular && \"pt-12\")}>\n        <CardTitle className=\"text-xl\">{plan.name}</CardTitle>\n        <CardDescription>{plan.description}</CardDescription>\n        <div className=\"mt-4\">\n          <span className=\"text-4xl font-bold\">${plan.price}</span>\n          <span className=\"text-muted-foreground\">/{plan.period}</span>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        <ul className=\"space-y-3\">\n          {plan.features.map((feature, index) => (\n            <li key={index} className=\"flex items-start gap-2\">\n              {feature.included ? (\n                <CheckIcon className=\"size-4 text-green-500 mt-0.5 shrink-0\" />\n              ) : (\n                <XIcon className=\"size-4 text-muted-foreground mt-0.5 shrink-0\" />\n              )}\n              <span\n                className={cn(\n                  \"text-sm\",\n                  !feature.included && \"text-muted-foreground line-through\",\n                )}\n              >\n                {feature.name}\n              </span>\n            </li>\n          ))}\n        </ul>\n      </CardContent>\n\n      <CardFooter>\n        <Button\n          className=\"w-full\"\n          variant={isPopular ? \"default\" : \"outline\"}\n          size=\"lg\"\n        >\n          {plan.buttonText}\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n\nexport default function PricingCards() {\n  return (\n    <div className=\"w-full max-w-6xl mx-auto\">\n      <div className=\"text-center mb-12\">\n        <h2 className=\"text-3xl font-bold mb-4\">Choose Your Plan</h2>\n        <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n          Select the perfect plan for your needs. Upgrade or downgrade at any\n          time.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 items-start\">\n        {pricingPlans.map((plan) => (\n          <PricingCard key={plan.id} plan={plan} isPopular={plan.popular} />\n        ))}\n      </div>\n\n      <div className=\"text-center mt-12\">\n        <p className=\"text-sm text-muted-foreground mb-4\">\n          All plans include 30-day money-back guarantee\n        </p>\n        <div className=\"flex items-center justify-center gap-4 text-xs text-muted-foreground\">\n          <span>✓ No setup fees</span>\n          <span>✓ Cancel anytime</span>\n          <span>✓ 24/7 support</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react"
    ],
    "path": "card-01"
  },
  {
    "id": "login-01",
    "name": "Authentication Forms",
    "description": "",
    "category": "login",
    "type": "block",
    "updatedAt": "2025-10-25T17:09:40.234Z",
    "files": [
      {
        "name": "meta.json",
        "path": "meta.json",
        "content": "{\n  \"name\": \"Authentication Forms\",\n  \"category\": \"login\"\n}\n",
        "language": "json"
      },
      {
        "name": "page.tsx",
        "path": "page.tsx",
        "content": "import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { EyeIcon, EyeOffIcon, Loader2Icon } from \"lucide-react\";\nimport {\n  Button,\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  Input,\n  Separator,\n} from \"@nui/core\";\n\nimport { loginSchema, type LoginFormData } from \"./validation\";\n\nexport default function LoginForm() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginFormData) => {\n    setIsLoading(true);\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n    console.log(\"Login data:\", data);\n    setIsLoading(false);\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader className=\"space-y-1\">\n        <CardTitle className=\"text-2xl font-bold text-center\">\n          Welcome back\n        </CardTitle>\n        <CardDescription className=\"text-center\">\n          Enter your credentials to access your account\n        </CardDescription>\n      </CardHeader>\n\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"email\"\n                      placeholder=\"john@example.com\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Enter your password\"\n                        {...field}\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? (\n                          <EyeOffIcon className=\"h-4 w-4\" />\n                        ) : (\n                          <EyeIcon className=\"h-4 w-4\" />\n                        )}\n                      </Button>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n              {isLoading && (\n                <Loader2Icon className=\"mr-2 h-4 w-4 animate-spin\" />\n              )}\n              Sign In\n            </Button>\n          </form>\n        </Form>\n\n        <div className=\"mt-4\">\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <Separator className=\"w-full\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-background px-2 text-muted-foreground\">\n                Or continue with\n              </span>\n            </div>\n          </div>\n\n          <div className=\"mt-4 grid grid-cols-2 gap-2\">\n            <Button variant=\"outline\" disabled={isLoading}>\n              <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n                <path\n                  fill=\"currentColor\"\n                  d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                />\n              </svg>\n              Google\n            </Button>\n            <Button variant=\"outline\" disabled={isLoading}>\n              <svg\n                className=\"mr-2 h-4 w-4\"\n                fill=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\" />\n              </svg>\n              GitHub\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n\n      <CardFooter className=\"flex flex-col space-y-2\">\n        <div className=\"text-sm text-center text-muted-foreground\">\n          Don't have an account?{\" \"}\n          <Button variant=\"link\" className=\"p-0 h-auto font-normal\">\n            Sign up\n          </Button>\n        </div>\n        <Button variant=\"link\" className=\"p-0 h-auto text-sm font-normal\">\n          Forgot your password?\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n",
        "language": "typescript"
      },
      {
        "name": "validation.ts",
        "path": "validation.ts",
        "content": "import { z } from \"zod\";\n\nexport const loginSchema = z.object({\n  email: z\n    .string()\n    .min(1, \"Email is required\")\n    .email(\"Please enter a valid email address\"),\n  password: z\n    .string()\n    .min(1, \"Password is required\")\n    .min(8, \"Password must be at least 8 characters\"),\n});\n\nexport const signupSchema = z\n  .object({\n    name: z\n      .string()\n      .min(1, \"Name is required\")\n      .min(2, \"Name must be at least 2 characters\"),\n    email: z\n      .string()\n      .min(1, \"Email is required\")\n      .email(\"Please enter a valid email address\"),\n    password: z\n      .string()\n      .min(1, \"Password is required\")\n      .min(8, \"Password must be at least 8 characters\")\n      .regex(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n        \"Password must contain at least one uppercase letter, one lowercase letter, and one number\",\n      ),\n    confirmPassword: z.string().min(1, \"Please confirm your password\"),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords don't match\",\n    path: [\"confirmPassword\"],\n  });\n\nexport const resetPasswordSchema = z.object({\n  email: z\n    .string()\n    .min(1, \"Email is required\")\n    .email(\"Please enter a valid email address\"),\n});\n\nexport type LoginFormData = z.infer<typeof loginSchema>;\nexport type SignupFormData = z.infer<typeof signupSchema>;\nexport type ResetPasswordFormData = z.infer<typeof resetPasswordSchema>;\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react",
      "react-hook-form",
      "@hookform/resolvers/zod",
      "lucide-react",
      "zod"
    ],
    "path": "login-01"
  },
  {
    "id": "card-02",
    "name": "Dashboard Stats Card",
    "description": "",
    "category": "cards",
    "type": "block",
    "updatedAt": "2025-10-25T17:09:40.234Z",
    "files": [
      {
        "name": "meta.json",
        "path": "meta.json",
        "content": "{\n  \"name\": \"Dashboard Stats Card\",\n  \"category\": \"cards\"\n}\n",
        "language": "json"
      },
      {
        "name": "page.tsx",
        "path": "page.tsx",
        "content": "import {\n  ActivityIcon,\n  DollarSignIcon,\n  ShoppingCartIcon,\n  TrendingDownIcon,\n  TrendingUpIcon,\n  UsersIcon,\n} from \"lucide-react\";\nimport { Line, LineChart, ResponsiveContainer } from \"recharts\";\nimport { Card, CardContent, CardHeader, CardTitle, cn } from \"@nui/core\";\n\nimport { formatCurrency, formatNumber, formatPercentage } from \"./utils\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  change: number;\n  changeLabel?: string;\n  icon?: React.ReactNode;\n  trend?: \"up\" | \"down\" | \"neutral\";\n  data?: Array<{ value: number }>;\n  className?: string;\n}\n\nfunction StatsCard({\n  title,\n  value,\n  change,\n  changeLabel = \"from last month\",\n  icon,\n  data,\n  className,\n}: StatsCardProps) {\n  const isPositive = change > 0;\n  const isNegative = change < 0;\n\n  const changeColor = isPositive\n    ? \"text-green-600 dark:text-green-400\"\n    : isNegative\n      ? \"text-red-600 dark:text-red-400\"\n      : \"text-muted-foreground\";\n\n  return (\n    <Card className={cn(\"relative overflow-hidden\", className)}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n          {title}\n        </CardTitle>\n        {icon && <div className=\"h-4 w-4 text-muted-foreground\">{icon}</div>}\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{value}</div>\n        <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n          <div className={cn(\"flex items-center\", changeColor)}>\n            {isPositive && <TrendingUpIcon className=\"h-3 w-3 mr-1\" />}\n            {isNegative && <TrendingDownIcon className=\"h-3 w-3 mr-1\" />}\n            <span className=\"font-medium\">\n              {isPositive && \"+\"}\n              {formatPercentage(Math.abs(change))}\n            </span>\n          </div>\n          <span>{changeLabel}</span>\n        </div>\n        {data && (\n          <div className=\"mt-4 h-[60px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={data}>\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"value\"\n                  stroke={\n                    isPositive ? \"#10b981\" : isNegative ? \"#ef4444\" : \"#6b7280\"\n                  }\n                  strokeWidth={2}\n                  dot={false}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Sample data for demonstration\nconst sampleData = [\n  { value: 400 },\n  { value: 300 },\n  { value: 500 },\n  { value: 280 },\n  { value: 590 },\n  { value: 320 },\n  { value: 490 },\n];\n\nexport default function StatsCardDemo() {\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n      <StatsCard\n        title=\"Total Revenue\"\n        value={formatCurrency(45231.89)}\n        change={20.1}\n        icon={<DollarSignIcon />}\n        trend=\"up\"\n        data={sampleData}\n      />\n      <StatsCard\n        title=\"Subscriptions\"\n        value={formatNumber(2350)}\n        change={180.1}\n        icon={<UsersIcon />}\n        trend=\"up\"\n        data={sampleData.map((d) => ({ value: d.value * 0.8 }))}\n      />\n      <StatsCard\n        title=\"Sales\"\n        value={formatNumber(12234)}\n        change={19}\n        icon={<ShoppingCartIcon />}\n        trend=\"up\"\n        data={sampleData.map((d) => ({ value: d.value * 1.2 }))}\n      />\n      <StatsCard\n        title=\"Active Now\"\n        value={formatNumber(573)}\n        change={-2.1}\n        icon={<ActivityIcon />}\n        trend=\"down\"\n        data={sampleData.map((d) => ({ value: d.value * 0.6 }))}\n      />\n    </div>\n  );\n}\n",
        "language": "typescript"
      },
      {
        "name": "utils.ts",
        "path": "utils.ts",
        "content": "/**\n * Format a number as currency\n */\nexport function formatCurrency(\n  amount: number,\n  currency: string = \"USD\",\n  locale: string = \"en-US\",\n): string {\n  return new Intl.NumberFormat(locale, {\n    style: \"currency\",\n    currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(amount);\n}\n\n/**\n * Format a number with appropriate suffixes (K, M, B)\n */\nexport function formatNumber(num: number): string {\n  if (num >= 1000000000) {\n    return (num / 1000000000).toFixed(1) + \"B\";\n  }\n  if (num >= 1000000) {\n    return (num / 1000000).toFixed(1) + \"M\";\n  }\n  if (num >= 1000) {\n    return (num / 1000).toFixed(1) + \"K\";\n  }\n  return num.toString();\n}\n\n/**\n * Format a number as percentage\n */\nexport function formatPercentage(num: number, decimals: number = 1): string {\n  return `${num.toFixed(decimals)}%`;\n}\n\n/**\n * Calculate percentage change between two values\n */\nexport function calculatePercentageChange(\n  current: number,\n  previous: number,\n): number {\n  if (previous === 0) return current > 0 ? 100 : 0;\n  return ((current - previous) / previous) * 100;\n}\n\n/**\n * Generate sample chart data\n */\nexport function generateChartData(\n  points: number = 7,\n  min: number = 100,\n  max: number = 1000,\n): Array<{ value: number; date?: string }> {\n  const data = [];\n  const now = new Date();\n\n  for (let i = points - 1; i >= 0; i--) {\n    const date = new Date(now);\n    date.setDate(date.getDate() - i);\n\n    data.push({\n      value: Math.floor(Math.random() * (max - min + 1)) + min,\n      date: date.toISOString().split(\"T\")[0],\n    });\n  }\n\n  return data;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "recharts",
      "@nui/core"
    ],
    "path": "card-02"
  },
  {
    "id": "table-01",
    "name": "Advanced Data Table",
    "description": "",
    "category": "tables",
    "type": "block",
    "updatedAt": "2025-10-25T17:09:40.234Z",
    "files": [
      {
        "name": "data.ts",
        "path": "data.ts",
        "content": "export interface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  status: \"active\" | \"inactive\" | \"pending\";\n  createdAt: string;\n}\n\nexport const sampleData: User[] = [\n  {\n    id: \"1\",\n    name: \"John Doe\",\n    email: \"john@example.com\",\n    role: \"Admin\",\n    status: \"active\",\n    createdAt: \"2024-01-15\",\n  },\n  {\n    id: \"2\",\n    name: \"Jane Smith\",\n    email: \"jane@example.com\",\n    role: \"Editor\",\n    status: \"active\",\n    createdAt: \"2024-01-20\",\n  },\n  {\n    id: \"3\",\n    name: \"Bob Johnson\",\n    email: \"bob@example.com\",\n    role: \"Viewer\",\n    status: \"inactive\",\n    createdAt: \"2024-01-10\",\n  },\n  {\n    id: \"4\",\n    name: \"Alice Brown\",\n    email: \"alice@example.com\",\n    role: \"Editor\",\n    status: \"pending\",\n    createdAt: \"2024-01-25\",\n  },\n  {\n    id: \"5\",\n    name: \"Charlie Wilson\",\n    email: \"charlie@example.com\",\n    role: \"Admin\",\n    status: \"active\",\n    createdAt: \"2024-01-05\",\n  },\n  {\n    id: \"6\",\n    name: \"Diana Davis\",\n    email: \"diana@example.com\",\n    role: \"Viewer\",\n    status: \"active\",\n    createdAt: \"2024-01-30\",\n  },\n  {\n    id: \"7\",\n    name: \"Eva Martinez\",\n    email: \"eva@example.com\",\n    role: \"Editor\",\n    status: \"inactive\",\n    createdAt: \"2024-01-12\",\n  },\n  {\n    id: \"8\",\n    name: \"Frank Taylor\",\n    email: \"frank@example.com\",\n    role: \"Viewer\",\n    status: \"pending\",\n    createdAt: \"2024-02-01\",\n  },\n];\n\nexport const roles = [\"Admin\", \"Editor\", \"Viewer\"] as const;\nexport const statuses = [\"active\", \"inactive\", \"pending\"] as const;\n\nexport type Role = (typeof roles)[number];\nexport type Status = (typeof statuses)[number];\n",
        "language": "typescript"
      },
      {
        "name": "meta.json",
        "path": "meta.json",
        "content": "{\n  \"name\": \"Advanced Data Table\",\n  \"category\": \"tables\"\n}\n",
        "language": "json"
      },
      {
        "name": "page.tsx",
        "path": "page.tsx",
        "content": "import { useMemo, useState } from \"react\";\nimport {\n  ChevronDownIcon,\n  ChevronUpIcon,\n  MoreHorizontalIcon,\n  SearchIcon,\n} from \"lucide-react\";\nimport {\n  Badge,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  Checkbox,\n  cn,\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  Input,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@nui/core\";\n\nimport { sampleData, type User } from \"./data\";\n\ntype SortField = keyof User;\ntype SortDirection = \"asc\" | \"desc\";\n\ninterface DataTableProps {\n  data?: User[];\n  className?: string;\n}\n\nexport default function DataTable({\n  data = sampleData,\n  className,\n}: DataTableProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortField, setSortField] = useState<SortField>(\"name\");\n  const [sortDirection, setSortDirection] = useState<SortDirection>(\"asc\");\n  const [selectedRows, setSelectedRows] = useState<Set<string>>(new Set());\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n\n  // Filter data based on search term\n  const filteredData = useMemo(() => {\n    if (!searchTerm) return data;\n\n    return data.filter((item) =>\n      Object.values(item).some((value) =>\n        value.toString().toLowerCase().includes(searchTerm.toLowerCase()),\n      ),\n    );\n  }, [data, searchTerm]);\n\n  // Sort filtered data\n  const sortedData = useMemo(() => {\n    return [...filteredData].sort((a, b) => {\n      const aValue = a[sortField];\n      const bValue = b[sortField];\n\n      if (aValue < bValue) return sortDirection === \"asc\" ? -1 : 1;\n      if (aValue > bValue) return sortDirection === \"asc\" ? 1 : -1;\n      return 0;\n    });\n  }, [filteredData, sortField, sortDirection]);\n\n  // Paginate sorted data\n  const paginatedData = useMemo(() => {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    return sortedData.slice(startIndex, startIndex + itemsPerPage);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(sortedData.length / itemsPerPage);\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      setSortField(field);\n      setSortDirection(\"asc\");\n    }\n  };\n\n  const handleSelectRow = (id: string) => {\n    const newSelected = new Set(selectedRows);\n    if (newSelected.has(id)) {\n      newSelected.delete(id);\n    } else {\n      newSelected.add(id);\n    }\n    setSelectedRows(newSelected);\n  };\n\n  const handleSelectAll = () => {\n    if (selectedRows.size === paginatedData.length) {\n      setSelectedRows(new Set());\n    } else {\n      setSelectedRows(new Set(paginatedData.map((item) => item.id)));\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      active:\n        \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\",\n      inactive: \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\",\n      pending:\n        \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\",\n    };\n\n    return (\n      <Badge\n        className={cn(\n          \"text-xs\",\n          variants[status as keyof typeof variants] || variants.inactive,\n        )}\n      >\n        {status}\n      </Badge>\n    );\n  };\n\n  const SortIcon = ({ field }: { field: SortField }) => {\n    if (sortField !== field) return null;\n    return sortDirection === \"asc\" ? (\n      <ChevronUpIcon className=\"h-4 w-4\" />\n    ) : (\n      <ChevronDownIcon className=\"h-4 w-4\" />\n    );\n  };\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Users</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"relative\">\n              <SearchIcon className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search users...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-8 w-64\"\n              />\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-12\">\n                  <Checkbox\n                    checked={\n                      selectedRows.size === paginatedData.length &&\n                      paginatedData.length > 0\n                    }\n                    onCheckedChange={handleSelectAll}\n                  />\n                </TableHead>\n                <TableHead\n                  className=\"cursor-pointer select-none\"\n                  onClick={() => handleSort(\"name\")}\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>Name</span>\n                    <SortIcon field=\"name\" />\n                  </div>\n                </TableHead>\n                <TableHead\n                  className=\"cursor-pointer select-none\"\n                  onClick={() => handleSort(\"email\")}\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>Email</span>\n                    <SortIcon field=\"email\" />\n                  </div>\n                </TableHead>\n                <TableHead\n                  className=\"cursor-pointer select-none\"\n                  onClick={() => handleSort(\"role\")}\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>Role</span>\n                    <SortIcon field=\"role\" />\n                  </div>\n                </TableHead>\n                <TableHead\n                  className=\"cursor-pointer select-none\"\n                  onClick={() => handleSort(\"status\")}\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>Status</span>\n                    <SortIcon field=\"status\" />\n                  </div>\n                </TableHead>\n                <TableHead className=\"w-12\"></TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {paginatedData.map((user) => (\n                <TableRow key={user.id}>\n                  <TableCell>\n                    <Checkbox\n                      checked={selectedRows.has(user.id)}\n                      onCheckedChange={() => handleSelectRow(user.id)}\n                    />\n                  </TableCell>\n                  <TableCell className=\"font-medium\">{user.name}</TableCell>\n                  <TableCell>{user.email}</TableCell>\n                  <TableCell>{user.role}</TableCell>\n                  <TableCell>{getStatusBadge(user.status)}</TableCell>\n                  <TableCell>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <MoreHorizontalIcon className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem>Edit</DropdownMenuItem>\n                        <DropdownMenuItem>View Details</DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-red-600\">\n                          Delete\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n\n        {/* Pagination */}\n        <div className=\"flex items-center justify-between space-x-2 py-4\">\n          <div className=\"text-sm text-muted-foreground\">\n            {selectedRows.size > 0 && (\n              <span>\n                {selectedRows.size} of {paginatedData.length} row(s) selected\n              </span>\n            )}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n              disabled={currentPage === 1}\n            >\n              Previous\n            </Button>\n            <div className=\"text-sm\">\n              Page {currentPage} of {totalPages}\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() =>\n                setCurrentPage(Math.min(totalPages, currentPage + 1))\n              }\n              disabled={currentPage === totalPages}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react"
    ],
    "path": "table-01"
  },
  {
    "id": "tree-01",
    "name": "Enhanced Tree Navigation",
    "description": "",
    "category": "navigation",
    "type": "block",
    "updatedAt": "2025-10-25T17:09:40.234Z",
    "files": [
      {
        "name": "data.ts",
        "path": "data.ts",
        "content": "export interface TreeNode {\n  id: string;\n  label: string;\n  children?: TreeNode[];\n  expanded?: boolean;\n  disabled?: boolean;\n  icon?: string;\n  badge?: string | number;\n  href?: string;\n}\n\nexport const treeData: TreeNode[] = [\n  {\n    id: \"dashboard\",\n    label: \"Dashboard\",\n    icon: \"LayoutDashboard\",\n    href: \"/dashboard\",\n  },\n  {\n    id: \"projects\",\n    label: \"Projects\",\n    icon: \"FolderOpen\",\n    badge: 12,\n    expanded: true,\n    children: [\n      {\n        id: \"active-projects\",\n        label: \"Active Projects\",\n        icon: \"Play\",\n        badge: 8,\n        expanded: true,\n        children: [\n          {\n            id: \"project-alpha\",\n            label: \"Project Alpha\",\n            icon: \"Zap\",\n            badge: \"NEW\",\n            href: \"/projects/alpha\",\n          },\n          {\n            id: \"project-beta\",\n            label: \"Project Beta\",\n            icon: \"Star\",\n            href: \"/projects/beta\",\n          },\n          {\n            id: \"project-gamma\",\n            label: \"Project Gamma\",\n            icon: \"Rocket\",\n            disabled: true,\n            href: \"/projects/gamma\",\n          },\n        ],\n      },\n      {\n        id: \"archived-projects\",\n        label: \"Archived Projects\",\n        icon: \"Archive\",\n        badge: 4,\n        expanded: false,\n        children: [\n          {\n            id: \"project-legacy\",\n            label: \"Legacy Project\",\n            icon: \"History\",\n            href: \"/projects/legacy\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: \"team\",\n    label: \"Team\",\n    icon: \"Users\",\n    badge: 24,\n    expanded: false,\n    children: [\n      {\n        id: \"developers\",\n        label: \"Developers\",\n        icon: \"Code\",\n        badge: 12,\n        href: \"/team/developers\",\n      },\n      {\n        id: \"designers\",\n        label: \"Designers\",\n        icon: \"Palette\",\n        badge: 6,\n        href: \"/team/designers\",\n      },\n      {\n        id: \"managers\",\n        label: \"Managers\",\n        icon: \"Crown\",\n        badge: 6,\n        href: \"/team/managers\",\n      },\n    ],\n  },\n  {\n    id: \"settings\",\n    label: \"Settings\",\n    icon: \"Settings\",\n    expanded: false,\n    children: [\n      {\n        id: \"general\",\n        label: \"General\",\n        icon: \"Sliders\",\n        href: \"/settings/general\",\n      },\n      {\n        id: \"security\",\n        label: \"Security\",\n        icon: \"Shield\",\n        href: \"/settings/security\",\n      },\n      {\n        id: \"notifications\",\n        label: \"Notifications\",\n        icon: \"Bell\",\n        badge: 3,\n        href: \"/settings/notifications\",\n      },\n    ],\n  },\n];\n",
        "language": "typescript"
      },
      {
        "name": "meta.json",
        "path": "meta.json",
        "content": "{\n  \"name\": \"Enhanced Tree Navigation\",\n  \"category\": \"navigation\",\n  \"size\": \"1\"\n}\n",
        "language": "json"
      },
      {
        "name": "page.tsx",
        "path": "page.tsx",
        "content": "import {\n  ArchiveIcon,\n  BellIcon,\n  CodeIcon,\n  CrownIcon,\n  FolderOpenIcon,\n  HistoryIcon,\n  LayoutDashboardIcon,\n  PaletteIcon,\n  PlayIcon,\n  RocketIcon,\n  SettingsIcon,\n  ShieldIcon,\n  SlidersIcon,\n  StarIcon,\n  UsersIcon,\n  ZapIcon,\n} from \"lucide-react\";\nimport { Tree, useTree, type TreeNode } from \"@nui/core\";\n\nimport { treeData } from \"./data\";\n\n// Icon mapping\nconst iconMap = {\n  LayoutDashboard: LayoutDashboardIcon,\n  FolderOpen: FolderOpenIcon,\n  Play: PlayIcon,\n  Zap: ZapIcon,\n  Star: StarIcon,\n  Rocket: RocketIcon,\n  Archive: ArchiveIcon,\n  History: HistoryIcon,\n  Users: UsersIcon,\n  Code: CodeIcon,\n  Palette: PaletteIcon,\n  Crown: CrownIcon,\n  Settings: SettingsIcon,\n  Sliders: SlidersIcon,\n  Shield: ShieldIcon,\n  Bell: BellIcon,\n} as const;\n\ntype IconName = keyof typeof iconMap;\n\n// Helper function to get icon component\nfunction getIconComponent(iconName?: string) {\n  if (!iconName || !(iconName in iconMap)) return null;\n  const IconComponent = iconMap[iconName as IconName];\n  return <IconComponent className=\"h-4 w-4 shrink-0\" />;\n}\n\n// Transform the data to include React icon components\nfunction transformTreeData(data: any[]): TreeNode[] {\n  return data.map((node) => ({\n    ...node,\n    icon: getIconComponent(node.icon),\n    children: node.children ? transformTreeData(node.children) : undefined,\n  }));\n}\n\nexport default function TreeView() {\n  const transformedData = transformTreeData(treeData);\n\n  const { data, selectedId, handleSelect, handleToggle, handleNavigate } =\n    useTree(transformedData, {\n      onNavigate: (href: string, node: TreeNode) => {\n        // In a real app, you would use your router here\n        console.log(\"Navigate to:\", href, node);\n        // Example: router.push(href);\n      },\n    });\n\n  return (\n    <div className=\"w-full max-w-sm border rounded-lg bg-background\">\n      <div className=\"p-4\">\n        <h3 className=\"text-sm font-medium mb-3\">Enhanced Tree Navigation</h3>\n        <Tree\n          data={data}\n          selectedId={selectedId}\n          onSelect={handleSelect}\n          onToggle={handleToggle}\n          onNavigate={handleNavigate}\n          aria-label=\"Application navigation with icons and badges\"\n        />\n      </div>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "size": "1",
    "path": "tree-01"
  },
  {
    "id": "tree-02",
    "name": "Tree View with Icons",
    "description": "",
    "category": "navigation",
    "type": "block",
    "updatedAt": "2025-10-25T17:09:40.234Z",
    "files": [
      {
        "name": "data.ts",
        "path": "data.ts",
        "content": "export interface TreeNode {\n  id: string;\n  label: string;\n  children?: TreeNode[];\n  expanded?: boolean;\n  type?: \"folder\" | \"file\";\n}\n\nexport const treeData: TreeNode[] = [\n  {\n    id: \"engineering\",\n    label: \"Engineering\",\n    type: \"folder\",\n    expanded: true,\n    children: [\n      {\n        id: \"frontend\",\n        label: \"Frontend\",\n        type: \"folder\",\n        expanded: true,\n        children: [\n          {\n            id: \"design-system\",\n            label: \"Design System\",\n            type: \"folder\",\n            expanded: true,\n            children: [\n              { id: \"components\", label: \"Components\", type: \"file\" },\n              { id: \"tokens\", label: \"Tokens\", type: \"file\" },\n              { id: \"guidelines\", label: \"Guidelines\", type: \"file\" },\n            ],\n          },\n          { id: \"web-platform\", label: \"Web Platform\", type: \"file\" },\n        ],\n      },\n      {\n        id: \"backend\",\n        label: \"Backend\",\n        type: \"folder\",\n        expanded: false,\n        children: [\n          { id: \"platform-team\", label: \"Platform Team\", type: \"file\" },\n        ],\n      },\n    ],\n  },\n  {\n    id: \"marketing\",\n    label: \"Marketing\",\n    type: \"folder\",\n    expanded: false,\n    children: [],\n  },\n  {\n    id: \"operations\",\n    label: \"Operations\",\n    type: \"folder\",\n    expanded: false,\n    children: [],\n  },\n];\n",
        "language": "typescript"
      },
      {
        "name": "meta.json",
        "path": "meta.json",
        "content": "{\n  \"name\": \"Tree View with Icons\",\n  \"category\": \"navigation\",\n  \"size\": \"2\"\n}\n",
        "language": "json"
      },
      {
        "name": "page.tsx",
        "path": "page.tsx",
        "content": "import { useState } from \"react\";\nimport {\n  ChevronDownIcon,\n  ChevronRightIcon,\n  FileIcon,\n  FolderIcon,\n  FolderOpenIcon,\n} from \"lucide-react\";\nimport { cn } from \"@nui/core\";\n\nimport type { TreeNode } from \"./data\";\nimport { treeData } from \"./data\";\n\ninterface TreeItemProps {\n  node: TreeNode;\n  level: number;\n  onToggle: (nodeId: string) => void;\n}\n\nfunction TreeItem({ node, level, onToggle }: TreeItemProps) {\n  const hasChildren = node.children && node.children.length > 0;\n  const isExpanded = node.expanded;\n  const isFolder = node.type === \"folder\" || hasChildren;\n\n  const getIcon = () => {\n    if (!isFolder) {\n      return <FileIcon className=\"h-4 w-4 text-muted-foreground\" />;\n    }\n\n    if (isExpanded) {\n      return <FolderOpenIcon className=\"h-4 w-4 text-blue-600\" />;\n    }\n\n    return <FolderIcon className=\"h-4 w-4 text-blue-600\" />;\n  };\n\n  return (\n    <div>\n      <div\n        className={cn(\n          \"flex items-center py-1 px-2 hover:bg-muted/50 cursor-pointer\",\n          \"text-sm\",\n        )}\n        style={{ paddingLeft: `${level * 16 + 8}px` }}\n        onClick={() => hasChildren && onToggle(node.id)}\n      >\n        <div className=\"flex items-center min-w-0 flex-1\">\n          {hasChildren ? (\n            <div className=\"mr-1 flex-shrink-0\">\n              {isExpanded ? (\n                <ChevronDownIcon className=\"h-4 w-4\" />\n              ) : (\n                <ChevronRightIcon className=\"h-4 w-4\" />\n              )}\n            </div>\n          ) : (\n            <div className=\"w-5 flex-shrink-0\" />\n          )}\n          <div className=\"mr-2 flex-shrink-0\">{getIcon()}</div>\n          <span className=\"truncate\">{node.label}</span>\n        </div>\n      </div>\n      {hasChildren && isExpanded && (\n        <div>\n          {node.children?.map((child) => (\n            <TreeItem\n              key={child.id}\n              node={child}\n              level={level + 1}\n              onToggle={onToggle}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function TreeViewWithIcons() {\n  const [nodes, setNodes] = useState<TreeNode[]>(treeData);\n\n  const toggleNode = (nodeId: string) => {\n    const updateNodes = (nodes: TreeNode[]): TreeNode[] => {\n      return nodes.map((node) => {\n        if (node.id === nodeId) {\n          return { ...node, expanded: !node.expanded };\n        }\n        if (node.children) {\n          return { ...node, children: updateNodes(node.children) };\n        }\n        return node;\n      });\n    };\n\n    setNodes(updateNodes(nodes));\n  };\n\n  return (\n    <div className=\"w-full max-w-sm border rounded-lg bg-background\">\n      <div className=\"p-4\">\n        <h3 className=\"text-sm font-medium mb-3\">Basic tree with icons</h3>\n        <div className=\"space-y-0\">\n          {nodes.map((node) => (\n            <TreeItem\n              key={node.id}\n              node={node}\n              level={0}\n              onToggle={toggleNode}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react",
      "@nui/core"
    ],
    "size": "2",
    "path": "tree-02"
  },
  {
    "id": "tree-03",
    "name": "Tree View with Lines",
    "description": "",
    "category": "navigation",
    "type": "block",
    "updatedAt": "2025-10-25T17:09:40.234Z",
    "files": [
      {
        "name": "data.ts",
        "path": "data.ts",
        "content": "export interface TreeNode {\n  id: string;\n  label: string;\n  children?: TreeNode[];\n  expanded?: boolean;\n}\n\nexport const treeData: TreeNode[] = [\n  {\n    id: \"engineering\",\n    label: \"Engineering\",\n    expanded: true,\n    children: [\n      {\n        id: \"frontend\",\n        label: \"Frontend\",\n        expanded: true,\n        children: [\n          {\n            id: \"design-system\",\n            label: \"Design System\",\n            expanded: true,\n            children: [\n              { id: \"components\", label: \"Components\" },\n              { id: \"tokens\", label: \"Tokens\" },\n              { id: \"guidelines\", label: \"Guidelines\" },\n            ],\n          },\n          { id: \"web-platform\", label: \"Web Platform\" },\n        ],\n      },\n      {\n        id: \"backend\",\n        label: \"Backend\",\n        expanded: false,\n        children: [{ id: \"platform-team\", label: \"Platform Team\" }],\n      },\n    ],\n  },\n  {\n    id: \"marketing\",\n    label: \"Marketing\",\n    expanded: false,\n    children: [],\n  },\n  {\n    id: \"operations\",\n    label: \"Operations\",\n    expanded: false,\n    children: [],\n  },\n];\n",
        "language": "typescript"
      },
      {
        "name": "meta.json",
        "path": "meta.json",
        "content": "{\n  \"name\": \"Tree View with Lines\",\n  \"category\": \"navigation\",\n  \"size\": \"1\"\n}\n",
        "language": "json"
      },
      {
        "name": "page.tsx",
        "path": "page.tsx",
        "content": "import { useState } from \"react\";\nimport { ChevronDownIcon, ChevronRightIcon } from \"lucide-react\";\nimport { cn } from \"@nui/core\";\n\nimport type { TreeNode } from \"./data\";\nimport { treeData } from \"./data\";\n\ninterface TreeItemProps {\n  node: TreeNode;\n  level: number;\n  onToggle: (nodeId: string) => void;\n  isLast?: boolean;\n  parentLines?: boolean[];\n}\n\nfunction TreeItem({\n  node,\n  level,\n  onToggle,\n  isLast = false,\n  parentLines = [],\n}: TreeItemProps) {\n  const hasChildren = node.children && node.children.length > 0;\n  const isExpanded = node.expanded;\n\n  return (\n    <div>\n      <div\n        className={cn(\n          \"flex items-center py-1 px-2 hover:bg-muted/50 cursor-pointer relative\",\n          \"text-sm\",\n        )}\n        onClick={() => hasChildren && onToggle(node.id)}\n      >\n        {/* Vertical lines for parent levels */}\n        {parentLines.map((showLine, index) => (\n          <div\n            key={index}\n            className={cn(\n              \"absolute w-px bg-border\",\n              showLine ? \"opacity-100\" : \"opacity-0\",\n            )}\n            style={{\n              left: `${index * 16 + 16}px`,\n              top: 0,\n              bottom: 0,\n            }}\n          />\n        ))}\n\n        {/* Current level connector */}\n        {level > 0 && (\n          <>\n            {/* Vertical line */}\n            <div\n              className=\"absolute w-px bg-border\"\n              style={{\n                left: `${level * 16 + 16}px`,\n                top: 0,\n                bottom: isLast ? \"50%\" : \"100%\",\n              }}\n            />\n            {/* Horizontal line */}\n            <div\n              className=\"absolute h-px bg-border\"\n              style={{\n                left: `${level * 16 + 16}px`,\n                top: \"50%\",\n                width: \"12px\",\n              }}\n            />\n          </>\n        )}\n\n        <div\n          className=\"flex items-center min-w-0 flex-1\"\n          style={{ paddingLeft: `${level * 16 + (level > 0 ? 20 : 8)}px` }}\n        >\n          {hasChildren ? (\n            <div className=\"mr-1 flex-shrink-0\">\n              {isExpanded ? (\n                <ChevronDownIcon className=\"h-4 w-4\" />\n              ) : (\n                <ChevronRightIcon className=\"h-4 w-4\" />\n              )}\n            </div>\n          ) : (\n            <div className=\"w-5 flex-shrink-0\" />\n          )}\n          <span className=\"truncate\">{node.label}</span>\n        </div>\n      </div>\n      {hasChildren && isExpanded && (\n        <div>\n          {node.children?.map((child, index) => {\n            const isChildLast = index === node.children!.length - 1;\n            const newParentLines = [...parentLines];\n            if (level >= 0) {\n              newParentLines[level] = !isLast;\n            }\n\n            return (\n              <TreeItem\n                key={child.id}\n                node={child}\n                level={level + 1}\n                onToggle={onToggle}\n                isLast={isChildLast}\n                parentLines={newParentLines}\n              />\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function TreeViewWithLines() {\n  const [nodes, setNodes] = useState<TreeNode[]>(treeData);\n\n  const toggleNode = (nodeId: string) => {\n    const updateNodes = (nodes: TreeNode[]): TreeNode[] => {\n      return nodes.map((node) => {\n        if (node.id === nodeId) {\n          return { ...node, expanded: !node.expanded };\n        }\n        if (node.children) {\n          return { ...node, children: updateNodes(node.children) };\n        }\n        return node;\n      });\n    };\n\n    setNodes(updateNodes(nodes));\n  };\n\n  return (\n    <div className=\"w-full max-w-sm border rounded-lg bg-background\">\n      <div className=\"p-4\">\n        <h3 className=\"text-sm font-medium mb-3\">\n          Tree View with Visual Connecting Lines\n        </h3>\n        <div className=\"space-y-0\">\n          {nodes.map((node, index) => (\n            <TreeItem\n              key={node.id}\n              node={node}\n              level={0}\n              onToggle={toggleNode}\n              isLast={index === nodes.length - 1}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react",
      "lucide-react",
      "@nui/core"
    ],
    "size": "1",
    "path": "tree-03"
  },
  {
    "id": "accordion-demo",
    "name": "Accordion Demo",
    "description": "Accordion Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "accordion-demo.tsx",
        "path": "accordion-demo.tsx",
        "content": "import {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@nui/core\";\n\nexport default function AccordionDemo() {\n  return (\n    <Accordion className=\"mx-auto w-96\" orientation=\"vertical\">\n      <AccordionItem>\n        <AccordionTrigger>Is it an accordion?</AccordionTrigger>\n        <AccordionContent>\n          Yes, it is an accordion. It is a component that allows you to collapse\n          and expand content.\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionTrigger>Is it animated?</AccordionTrigger>\n        <AccordionContent>\n          Yes, it is animated. It is a component that allows you to collapse and\n          expand content.\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionTrigger>Is it customizable?</AccordionTrigger>\n        <AccordionContent>\n          Yes, it is customizable. It is a component that allows you to collapse\n          and expand content.\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "alert-danger",
    "name": "Alert Danger",
    "description": "Alert Danger component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "alert-danger.tsx",
        "path": "alert-danger.tsx",
        "content": "import { XCircleIcon } from \"lucide-react\";\nimport { Alert, AlertDescription, AlertTitle } from \"@nui/core\";\n\nexport default function AlertDanger() {\n  return (\n    <Alert variant=\"danger\">\n      <XCircleIcon />\n      <AlertTitle>Your subscription has been canceled</AlertTitle>\n      <AlertDescription>\n        Your access to premium features will end in 30 days. You can reactivate\n        your subscription anytime.\n      </AlertDescription>\n    </Alert>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "alert-demo",
    "name": "Alert Demo",
    "description": "Alert Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "alert-demo.tsx",
        "path": "alert-demo.tsx",
        "content": "import { AlertTriangleIcon } from \"lucide-react\";\nimport { Alert, AlertDescription, AlertTitle } from \"@nui/core\";\n\nexport default function AlertDemo() {\n  return (\n    <Alert>\n      <AlertTriangleIcon />\n      <AlertTitle>No Internet Connection</AlertTitle>\n      <AlertDescription>\n        Please check your internet connection and try again.\n      </AlertDescription>\n    </Alert>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "alert-dialog-demo",
    "name": "Alert Dialog Demo",
    "description": "Alert Dialog Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "alert-dialog-demo.tsx",
        "path": "alert-dialog-demo.tsx",
        "content": "import {\n  AlertDialog,\n  AlertDialogClose,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n  Button,\n} from \"@nui/core\";\n\nexport default function AlertDialogDemo() {\n  return (\n    <AlertDialog>\n      <AlertDialogTrigger\n        render={(props) => (\n          <Button {...props} variant=\"destructive\">\n            Delete Post\n          </Button>\n        )}\n      />\n      <AlertDialogContent className=\"space-y-4\">\n        <AlertDialogHeader>\n          <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n          <AlertDialogDescription>\n            This action cannot be undone. Your post will be permanently deleted.\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogClose\n            render={(props) => (\n              <Button {...props} size=\"sm\" variant=\"ghost\">\n                Cancel\n              </Button>\n            )}\n          />\n          <Button size=\"sm\" variant=\"destructive\">\n            Delete\n          </Button>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "alert-info",
    "name": "Alert Info",
    "description": "Alert Info component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "alert-info.tsx",
        "path": "alert-info.tsx",
        "content": "import { InfoIcon } from \"lucide-react\";\nimport { Alert, AlertDescription, AlertTitle } from \"@nui/core\";\n\nexport default function AlertInfo() {\n  return (\n    <Alert variant=\"info\">\n      <InfoIcon />\n      <AlertTitle>Browser Update Available</AlertTitle>\n      <AlertDescription>\n        A new version of your browser is available. Updating your browser\n        ensures better security and performance.\n      </AlertDescription>\n    </Alert>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "alert-success",
    "name": "Alert Success",
    "description": "Alert Success component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "alert-success.tsx",
        "path": "alert-success.tsx",
        "content": "import { CircleCheckIcon } from \"lucide-react\";\nimport { Alert, AlertDescription, AlertTitle } from \"@nui/core\";\n\nexport default function AlertSuccess() {\n  return (\n    <Alert variant=\"success\">\n      <CircleCheckIcon />\n      <AlertTitle>Your account has been created</AlertTitle>\n      <AlertDescription>\n        You can now sign in with your new account credentials.\n      </AlertDescription>\n    </Alert>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "alert-warning",
    "name": "Alert Warning",
    "description": "Alert Warning component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "alert-warning.tsx",
        "path": "alert-warning.tsx",
        "content": "import { AlertTriangleIcon } from \"lucide-react\";\nimport { Alert, AlertDescription, AlertTitle } from \"@nui/core\";\n\nexport default function AlertWarning() {\n  return (\n    <Alert variant=\"warning\">\n      <AlertTriangleIcon />\n      <AlertTitle>Your session is about to expire</AlertTitle>\n      <AlertDescription>\n        You will be logged out in 5 minutes. Please save your work and refresh\n        the page.\n      </AlertDescription>\n    </Alert>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "alert-with-action",
    "name": "Alert With Action",
    "description": "Alert With Action component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "alert-with-action.tsx",
        "path": "alert-with-action.tsx",
        "content": "import { AlertTriangleIcon } from \"lucide-react\";\nimport { Alert, AlertTitle, Button } from \"@nui/core\";\n\nexport default function AlertWithAction() {\n  return (\n    <Alert>\n      <AlertTriangleIcon />\n      <AlertTitle className=\"line-clamp-1 max-w-[calc(100%-4rem)] overflow-ellipsis\">\n        No Internet Connection\n      </AlertTitle>\n      <Button\n        className=\"absolute top-1/2 right-4 h-6 -translate-y-1/2 shadow-none\"\n        size=\"sm\"\n        variant=\"outline\"\n      >\n        Try Again\n      </Button>\n    </Alert>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "aspect-ratio-demo",
    "name": "Aspect Ratio Demo",
    "description": "Aspect Ratio Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "aspect-ratio-demo.tsx",
        "path": "aspect-ratio-demo.tsx",
        "content": "import { AspectRatio } from \"@nui/core\";\n\nexport default function AspectRatioDemo() {\n  return (\n    <AspectRatio\n      ratio={16 / 9}\n      className=\"bg-card text-card-foreground rounded-lg border\"\n    >\n      <div className=\"flex size-full items-center justify-center font-medium\">\n        Content\n      </div>\n    </AspectRatio>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "avatar-demo",
    "name": "Avatar Demo",
    "description": "Avatar Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "avatar-demo.tsx",
        "path": "avatar-demo.tsx",
        "content": "import { Avatar, AvatarFallback, AvatarImage } from \"@nui/core\";\n\nexport default function AvatarDemo() {\n  return (\n    <Avatar>\n      <AvatarImage src=\"/avatars/bora.png\" alt=\"User\" />\n      <AvatarFallback>BB</AvatarFallback>\n    </Avatar>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "avatar-fallback",
    "name": "Avatar Fallback",
    "description": "Avatar Fallback component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "avatar-fallback.tsx",
        "path": "avatar-fallback.tsx",
        "content": "import { Avatar, AvatarFallback } from \"@nui/core\";\n\nexport default function AvatarWithFallback() {\n  return (\n    <Avatar>\n      <AvatarFallback>BB</AvatarFallback>\n    </Avatar>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "avatar-sizes",
    "name": "Avatar Sizes",
    "description": "Avatar Sizes component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "avatar-sizes.tsx",
        "path": "avatar-sizes.tsx",
        "content": "import { Avatar, AvatarFallback, AvatarImage } from \"@nui/core\";\n\nexport default function AvatarSizes() {\n  return (\n    <div className=\"flex flex-row items-center gap-4\">\n      <Avatar size=\"sm\">\n        <AvatarImage src=\"/avatars/bora.png\" alt=\"User\" />\n        <AvatarFallback>BB</AvatarFallback>\n      </Avatar>\n      <Avatar size=\"md\">\n        <AvatarImage src=\"/avatars/bora.png\" alt=\"User\" />\n        <AvatarFallback>BB</AvatarFallback>\n      </Avatar>\n      <Avatar size=\"lg\">\n        <AvatarImage src=\"/avatars/bora.png\" alt=\"User\" />\n        <AvatarFallback>BB</AvatarFallback>\n      </Avatar>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "badge-danger",
    "name": "Badge Danger",
    "description": "Badge Danger component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "badge-danger.tsx",
        "path": "badge-danger.tsx",
        "content": "import { Badge } from \"@nui/core\";\n\nexport default function BadgeDanger() {\n  return <Badge variant=\"danger\">Danger</Badge>;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "badge-demo",
    "name": "Badge Demo",
    "description": "Badge Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "badge-demo.tsx",
        "path": "badge-demo.tsx",
        "content": "import { Badge } from \"@nui/core\";\n\nexport default function BadgeDemo() {\n  return <Badge>Badge</Badge>;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "badge-info",
    "name": "Badge Info",
    "description": "Badge Info component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "badge-info.tsx",
        "path": "badge-info.tsx",
        "content": "import { Badge } from \"@nui/core\";\n\nexport default function BadgeInfo() {\n  return <Badge variant=\"info\">Info</Badge>;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "badge-outline",
    "name": "Badge Outline",
    "description": "Badge Outline component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "badge-outline.tsx",
        "path": "badge-outline.tsx",
        "content": "import { Badge } from \"@nui/core\";\n\nexport default function BadgeOutline() {\n  return <Badge variant=\"outline\">Outline</Badge>;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "badge-secondary",
    "name": "Badge Secondary",
    "description": "Badge Secondary component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "badge-secondary.tsx",
        "path": "badge-secondary.tsx",
        "content": "import { Badge } from \"@nui/core\";\n\nexport default function BadgeSecondary() {\n  return <Badge variant=\"secondary\">Secondary</Badge>;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "badge-success",
    "name": "Badge Success",
    "description": "Badge Success component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "badge-success.tsx",
        "path": "badge-success.tsx",
        "content": "import { Badge } from \"@nui/core\";\n\nexport default function BadgeSuccess() {\n  return <Badge variant=\"success\">Success</Badge>;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "badge-warning",
    "name": "Badge Warning",
    "description": "Badge Warning component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "badge-warning.tsx",
        "path": "badge-warning.tsx",
        "content": "import { Badge } from \"@nui/core\";\n\nexport default function BadgeWarning() {\n  return <Badge variant=\"warning\">Warning</Badge>;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "breadcrumbs-custom-separator",
    "name": "Breadcrumbs Custom Separator",
    "description": "Breadcrumbs Custom Separator component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "breadcrumbs-custom-separator.tsx",
        "path": "breadcrumbs-custom-separator.tsx",
        "content": "import { SlashIcon } from \"lucide-react\";\nimport {\n  Breadcrumb,\n  BreadcrumbEllipsis,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@nui/core\";\n\nexport default function BreadcrumbsCustomSeparator() {\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <SlashIcon className=\"h-4 w-4\" />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem>\n          <DropdownMenu>\n            <DropdownMenuTrigger className=\"flex items-center gap-1\">\n              <BreadcrumbEllipsis className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Toggle menu</span>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"start\">\n              <DropdownMenuItem>Documentation</DropdownMenuItem>\n              <DropdownMenuItem>Themes</DropdownMenuItem>\n              <DropdownMenuItem>GitHub</DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <SlashIcon className=\"h-4 w-4\" />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"/docs/components\">Components</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <SlashIcon className=\"h-4 w-4\" />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react"
    ],
    "path": ""
  },
  {
    "id": "breadcrumbs-demo",
    "name": "Breadcrumbs Demo",
    "description": "Breadcrumbs Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "breadcrumbs-demo.tsx",
        "path": "breadcrumbs-demo.tsx",
        "content": "import {\n  Breadcrumb,\n  BreadcrumbEllipsis,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@nui/core\";\n\nexport default function BreadcrumbsDemo() {\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem>\n          <DropdownMenu>\n            <DropdownMenuTrigger className=\"flex items-center gap-1\">\n              <BreadcrumbEllipsis className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Toggle menu</span>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"start\">\n              <DropdownMenuItem>Documentation</DropdownMenuItem>\n              <DropdownMenuItem>Themes</DropdownMenuItem>\n              <DropdownMenuItem>GitHub</DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"/docs/components\">Components</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator />\n        <BreadcrumbItem>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "button-demo",
    "name": "Button Demo",
    "description": "Button Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "button-demo.tsx",
        "path": "button-demo.tsx",
        "content": "import { Button } from \"@nui/core\";\n\nexport default function ButtonDemo() {\n  return <Button>Button</Button>;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "button-destructive",
    "name": "Button Destructive",
    "description": "Button Destructive component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "button-destructive.tsx",
        "path": "button-destructive.tsx",
        "content": "import { Button } from \"@nui/core\";\n\nexport default function ButtonDestructive() {\n  return <Button variant=\"destructive\">Destructive</Button>;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "button-ghost",
    "name": "Button Ghost",
    "description": "Button Ghost component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "button-ghost.tsx",
        "path": "button-ghost.tsx",
        "content": "import { Button } from \"@nui/core\";\n\nexport default function ButtonGhost() {\n  return <Button variant=\"ghost\">Ghost</Button>;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "button-icon",
    "name": "Button Icon",
    "description": "Button Icon component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "button-icon.tsx",
        "path": "button-icon.tsx",
        "content": "import { PencilIcon } from \"lucide-react\";\nimport { Button } from \"@nui/core\";\n\nexport default function ButtonIcon() {\n  return (\n    <Button size=\"icon\" variant=\"outline\">\n      <PencilIcon />\n    </Button>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "button-link",
    "name": "Button Link",
    "description": "Button Link component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "button-link.tsx",
        "path": "button-link.tsx",
        "content": "import { Button } from \"@nui/core\";\n\nexport default function ButtonLink() {\n  return <Button variant=\"link\">Link</Button>;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "button-loading",
    "name": "Button Loading",
    "description": "Button Loading component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "button-loading.tsx",
        "path": "button-loading.tsx",
        "content": "import { Loader2Icon } from \"lucide-react\";\nimport { Button } from \"@nui/core\";\n\nexport default function ButtonLoading() {\n  return (\n    <Button className=\"gap-2\" disabled>\n      <div className=\"animate-spin\">\n        <Loader2Icon />\n      </div>\n      Loading\n    </Button>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "button-outline",
    "name": "Button Outline",
    "description": "Button Outline component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "button-outline.tsx",
        "path": "button-outline.tsx",
        "content": "import { Button } from \"@nui/core\";\n\nexport default function ButtonOutline() {\n  return <Button variant=\"outline\">Outline</Button>;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "button-secondary",
    "name": "Button Secondary",
    "description": "Button Secondary component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "button-secondary.tsx",
        "path": "button-secondary.tsx",
        "content": "import { Button } from \"@nui/core\";\n\nexport default function ButtonSecondary() {\n  return <Button variant=\"secondary\">Secondary</Button>;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "button-sizes",
    "name": "Button Sizes",
    "description": "Button Sizes component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "button-sizes.tsx",
        "path": "button-sizes.tsx",
        "content": "import { Button } from \"@nui/core\";\n\nexport default function ButtonSizes() {\n  return (\n    <div className=\"flex flex-row items-center gap-2\">\n      <Button size=\"sm\">Small</Button>\n      <Button size=\"md\">Medium</Button>\n      <Button size=\"lg\">Large</Button>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "calendar-demo",
    "name": "Calendar Demo",
    "description": "Calendar Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "calendar-demo.tsx",
        "path": "calendar-demo.tsx",
        "content": "import { Calendar } from \"@nui/core\";\n\nexport default function CalendarDemo() {\n  return <Calendar showOutsideDays />;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "calendar-disabled",
    "name": "Calendar Disabled",
    "description": "Calendar Disabled component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "calendar-disabled.tsx",
        "path": "calendar-disabled.tsx",
        "content": "import { useState } from \"react\";\nimport { Calendar } from \"@nui/core\";\n\nexport default function CalendarDisabled() {\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined);\n\n  return (\n    <Calendar\n      mode=\"single\"\n      disabled={(date) => date < new Date()}\n      selected={selectedDate}\n      onSelect={setSelectedDate}\n    />\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "calendar-multiple",
    "name": "Calendar Multiple",
    "description": "Calendar Multiple component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "calendar-multiple.tsx",
        "path": "calendar-multiple.tsx",
        "content": "import { useState } from \"react\";\nimport { Calendar } from \"@nui/core\";\n\nexport default function CalendarMultiple() {\n  const [selectedDates, setSelectedDates] = useState<Date[] | undefined>(\n    undefined,\n  );\n\n  return (\n    <Calendar\n      mode=\"multiple\"\n      selected={selectedDates}\n      onSelect={setSelectedDates}\n      showOutsideDays\n    />\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "calendar-range",
    "name": "Calendar Range",
    "description": "Calendar Range component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "calendar-range.tsx",
        "path": "calendar-range.tsx",
        "content": "import { useState } from \"react\";\nimport type { DateRange } from \"react-day-picker\";\nimport { Calendar } from \"@nui/core\";\n\nexport default function CalendarRange() {\n  const [range, setRange] = useState<DateRange | undefined>(undefined);\n\n  return (\n    <Calendar\n      mode=\"range\"\n      selected={range}\n      onSelect={setRange}\n      showOutsideDays\n    />\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react",
      "react-day-picker",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "calendar-single",
    "name": "Calendar Single",
    "description": "Calendar Single component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "calendar-single.tsx",
        "path": "calendar-single.tsx",
        "content": "import { useState } from \"react\";\nimport { Calendar } from \"@nui/core\";\n\nexport default function CalendarSingle() {\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined);\n\n  return (\n    <Calendar\n      mode=\"single\"\n      selected={selectedDate}\n      onSelect={setSelectedDate}\n      showOutsideDays\n    />\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "card-demo",
    "name": "Card Demo",
    "description": "Card Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "card-demo.tsx",
        "path": "card-demo.tsx",
        "content": "import { LinkIcon, SendIcon } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport {\n  Button,\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Input,\n} from \"@nui/core\";\n\nexport default function CardDemo() {\n  return (\n    <Card className=\"w-full max-w-96\">\n      <CardHeader>\n        <CardTitle>Invite Team Members</CardTitle>\n        <CardDescription>\n          Invite your team members to join your workspace.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex gap-2\">\n          <Input inputContainerClassName=\"w-full\" placeholder=\"Email\" />\n          <Button className=\"shrink-0\" size=\"icon\">\n            <SendIcon />\n          </Button>\n        </div>\n        <div className=\"flex flex-col gap-2\">\n          <p className=\"text-muted-foreground text-sm\">\n            You can invite up to 10 team members. You have 8 invites left.\n          </p>\n        </div>\n        <div className=\"flex flex-col gap-4\">\n          <h4 className=\"text-sm font-medium\">Invited Members</h4>\n          <div className=\"flex items-center gap-2\">\n            <img\n              src=\"/memoji-1.png\"\n              alt=\"Avatar\"\n              width={24}\n              height={24}\n              className=\"size-8 rounded-full\"\n            />\n            <div className=\"flex flex-col text-xs\">\n              <p className=\"font-medium\">Karen Smith</p>\n              <p className=\"text-muted-foreground\">karen@9.ui</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <img\n              src=\"/memoji-3.png\"\n              alt=\"Avatar\"\n              width={24}\n              height={24}\n              className=\"size-8 rounded-full\"\n            />\n            <div className=\"flex flex-col text-xs\">\n              <p className=\"font-medium\">Chris Williams</p>\n              <p className=\"text-muted-foreground\">chris@9.ui</p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button\n          className=\"w-full gap-x-2\"\n          variant=\"link\"\n          onClick={() => {\n            toast.success(\"Invite link copied to clipboard\");\n          }}\n        >\n          <LinkIcon size={16} />\n          Invite with link\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "sonner"
    ],
    "path": ""
  },
  {
    "id": "card-with-image",
    "name": "Card With Image",
    "description": "Card With Image component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "card-with-image.tsx",
        "path": "card-with-image.tsx",
        "content": "import {\n  Button,\n  Card,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@nui/core\";\n\nexport default function CardWithImage() {\n  return (\n    <Card className=\"w-full max-w-80\">\n      <CardHeader>\n        <div className=\"relative aspect-video rounded-lg\">\n          <img\n            src=\"https://images.pexels.com/photos/1616403/pexels-photo-1616403.jpeg?auto=compress&cs=tinysrgb&w=450&h=800&dpr=2\"\n            alt=\"A scenic view of a mountain landscape\"\n            className=\"rounded-lg\"\n          />\n        </div>\n        <CardTitle className=\"mt-2\">What is 9ui?</CardTitle>\n        <CardDescription>\n          Deep dive into the 9ui components and learn how to use them in your\n          own projects.\n        </CardDescription>\n      </CardHeader>\n      <CardFooter>\n        <Button className=\"w-full\">Read more</Button>\n      </CardFooter>\n    </Card>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "carousel-demo",
    "name": "Carousel Demo",
    "description": "Carousel Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "carousel-demo.tsx",
        "path": "carousel-demo.tsx",
        "content": "import {\n  AspectRatio,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@nui/core\";\n\nconst slides = [1, 2, 3, 4, 5];\n\nexport default function CarouselDemo() {\n  return (\n    <div className=\"w-60 sm:w-80 lg:w-96\">\n      <Carousel>\n        <CarouselContent>\n          {slides.map((slide) => (\n            <CarouselItem key={slide}>\n              <AspectRatio\n                ratio={16 / 9}\n                className=\"bg-background rounded-lg border\"\n              >\n                <div className=\"text-foreground flex size-full items-center justify-center text-xl font-semibold\">\n                  {slide}\n                </div>\n              </AspectRatio>\n            </CarouselItem>\n          ))}\n        </CarouselContent>\n        <CarouselPrevious />\n        <CarouselNext />\n      </Carousel>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "carousel-looped",
    "name": "Carousel Looped",
    "description": "Carousel Looped component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "carousel-looped.tsx",
        "path": "carousel-looped.tsx",
        "content": "import {\n  AspectRatio,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@nui/core\";\n\nconst slides = [1, 2, 3, 4, 5];\n\nexport default function CarouselLooped() {\n  return (\n    <div className=\"w-60 sm:w-80 lg:w-96\">\n      <Carousel opts={{ loop: true }}>\n        <CarouselContent>\n          {slides.map((slide) => (\n            <CarouselItem key={slide}>\n              <AspectRatio\n                ratio={16 / 9}\n                className=\"bg-background rounded-lg border\"\n              >\n                <div className=\"text-foreground flex size-full items-center justify-center text-xl font-semibold\">\n                  {slide}\n                </div>\n              </AspectRatio>\n            </CarouselItem>\n          ))}\n        </CarouselContent>\n        <CarouselPrevious />\n        <CarouselNext />\n      </Carousel>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "carousel-multiple",
    "name": "Carousel Multiple",
    "description": "Carousel Multiple component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "carousel-multiple.tsx",
        "path": "carousel-multiple.tsx",
        "content": "import {\n  AspectRatio,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@nui/core\";\n\nconst slides = [1, 2, 3, 4, 5];\n\nexport default function CarouselMultiple() {\n  return (\n    <div className=\"w-60 sm:w-80 lg:w-96\">\n      <Carousel>\n        <CarouselContent>\n          {slides.map((slide) => (\n            <CarouselItem key={slide} className=\"basis-1/2\">\n              <AspectRatio\n                ratio={16 / 10}\n                className=\"bg-background rounded-lg border\"\n              >\n                <div className=\"text-foreground flex size-full items-center justify-center text-xl font-semibold\">\n                  {slide}\n                </div>\n              </AspectRatio>\n            </CarouselItem>\n          ))}\n        </CarouselContent>\n        <CarouselPrevious />\n        <CarouselNext />\n      </Carousel>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "carousel-thumbnail",
    "name": "Carousel Thumbnail",
    "description": "Carousel Thumbnail component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "carousel-thumbnail.tsx",
        "path": "carousel-thumbnail.tsx",
        "content": "import { useState } from \"react\";\nimport {\n  AspectRatio,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  cn,\n  type CarouselApi,\n} from \"@nui/core\";\n\nconst slides = [\n  \"https://images.pexels.com/photos/1616403/pexels-photo-1616403.jpeg?auto=compress&cs=tinysrgb&w=450&h=800&dpr=2\",\n  \"https://images.pexels.com/photos/1293120/pexels-photo-1293120.jpeg?auto=compress&cs=tinysrgb&w=450&h=800&dpr=2\",\n  \"https://images.pexels.com/photos/1103970/pexels-photo-1103970.jpeg?auto=compress&cs=tinysrgb&w=450&h=800&dpr=2\",\n  \"https://images.pexels.com/photos/2011824/pexels-photo-2011824.jpeg?auto=compress&cs=tinysrgb&w=450&h=800&dpr=2\",\n  \"https://images.pexels.com/photos/2471235/pexels-photo-2471235.jpeg?auto=compress&cs=tinysrgb&w=450&h=800&dpr=2\",\n];\n\nexport default function CarouselThumbnail() {\n  const [api, setApi] = useState<CarouselApi>();\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  api?.on(\"select\", () => {\n    setSelectedIndex(api?.selectedScrollSnap() ?? 0);\n  });\n\n  return (\n    <div className=\"w-60\">\n      <Carousel setApi={setApi}>\n        <CarouselContent>\n          {slides.map((slide) => (\n            <CarouselItem key={slide}>\n              <AspectRatio\n                ratio={16 / 9}\n                className=\"bg-background rounded-lg border\"\n              >\n                <img\n                  src={slide}\n                  alt=\"Carousel slide\"\n                  className=\"rounded-lg object-cover\"\n                />\n              </AspectRatio>\n            </CarouselItem>\n          ))}\n        </CarouselContent>\n        <div className=\"mt-2 flex w-full items-center justify-between\">\n          {slides.map((slide, index) => (\n            <button\n              key={slide}\n              type=\"button\"\n              className=\"relative size-10\"\n              onClick={() => api?.scrollTo(index)}\n            >\n              <img\n                src={slide}\n                alt=\"Carousel slide\"\n                className={cn(\n                  \"rounded-md object-cover opacity-60 transition-opacity duration-200 hover:opacity-100\",\n                  selectedIndex === index && \"opacity-100\",\n                )}\n              />\n            </button>\n          ))}\n        </div>\n      </Carousel>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react"
    ],
    "path": ""
  },
  {
    "id": "carousel-vertical",
    "name": "Carousel Vertical",
    "description": "Carousel Vertical component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "carousel-vertical.tsx",
        "path": "carousel-vertical.tsx",
        "content": "import {\n  AspectRatio,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@nui/core\";\n\nconst slides = [1, 2, 3, 4, 5];\n\nexport default function CarouselVertical() {\n  return (\n    <div className=\"w-60 py-8 sm:w-80 lg:w-96\">\n      <Carousel orientation=\"vertical\" opts={{ loop: true }}>\n        <CarouselContent className=\"aspect-video h-[-webkit-fill-available] w-full p-4\">\n          {slides.map((slide) => (\n            <CarouselItem key={slide} className=\"basis-full\">\n              <AspectRatio\n                ratio={16 / 9}\n                className=\"bg-background rounded-lg border\"\n              >\n                <div className=\"text-foreground flex size-full items-center justify-center font-medium\">\n                  {slide}\n                </div>\n              </AspectRatio>\n            </CarouselItem>\n          ))}\n        </CarouselContent>\n        <CarouselPrevious />\n        <CarouselNext />\n      </Carousel>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "chart-area",
    "name": "Chart Area",
    "description": "Chart Area component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "chart-area.tsx",
        "path": "chart-area.tsx",
        "content": "import { TrendingUpIcon } from \"lucide-react\";\nimport { Area, AreaChart, CartesianGrid, XAxis } from \"recharts\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@nui/core\";\n\nconst chartData = [\n  { month: \"Jan\", revenue: 1500 },\n  { month: \"Feb\", revenue: 3200 },\n  { month: \"Mar\", revenue: 2900 },\n  { month: \"Apr\", revenue: 2100 },\n  { month: \"May\", revenue: 4000 },\n  { month: \"Jun\", revenue: 3700 },\n  { month: \"Jul\", revenue: 4300 },\n  { month: \"Aug\", revenue: 4900 },\n  { month: \"Sep\", revenue: 4700 },\n  { month: \"Oct\", revenue: 5200 },\n  { month: \"Nov\", revenue: 6000 },\n  { month: \"Dec\", revenue: 7200 },\n];\n\nconst chartConfig = {\n  revenue: {\n    label: \"Revenue\",\n    color: \"var(--chart-1)\",\n  },\n} satisfies ChartConfig;\n\nexport default function ChartAreaDemo() {\n  const totalRevenue = chartData.reduce((sum, item) => sum + item.revenue, 0);\n  const averageRevenue = totalRevenue / chartData.length;\n  const lastMonthGrowth =\n    ((chartData[11].revenue - chartData[10].revenue) / chartData[10].revenue) *\n    100;\n\n  return (\n    <Card className=\"flex w-full flex-col\">\n      <CardHeader className=\"text-center\">\n        <CardTitle>Monthly Revenue Trend</CardTitle>\n        <CardDescription>Performance overview for 2024</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-1\">\n        <ChartContainer config={chartConfig} className=\"max-h-[300px] w-full\">\n          <AreaChart\n            accessibilityLayer\n            data={chartData}\n            margin={{\n              left: 12,\n              right: 12,\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <ChartTooltip\n              cursor={false}\n              content={<ChartTooltipContent indicator=\"line\" />}\n            />\n            <Area\n              dataKey=\"revenue\"\n              type=\"natural\"\n              fill=\"var(--chart-1)\"\n              fillOpacity={0.2}\n              stroke=\"var(--chart-1)\"\n            />\n          </AreaChart>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col gap-2 text-sm leading-none\">\n        <div className=\"flex w-full justify-between font-medium\">\n          <span>Total Revenue:</span>\n          <span>${totalRevenue.toLocaleString()}</span>\n        </div>\n        <div className=\"text-muted-foreground flex w-full justify-between\">\n          <span>Monthly Average:</span>\n          <span>\n            $\n            {averageRevenue.toLocaleString(undefined, {\n              maximumFractionDigits: 0,\n            })}\n          </span>\n        </div>\n        <div className=\"text-muted-foreground flex w-full justify-between\">\n          <span>Month-over-month growth:</span>\n          <span className=\"flex items-center gap-1\">\n            <TrendingUpIcon className=\"size-4\" />\n            {lastMonthGrowth.toFixed(1)}%\n          </span>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "recharts"
    ],
    "path": ""
  },
  {
    "id": "chart-bar",
    "name": "Chart Bar",
    "description": "Chart Bar component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "chart-bar.tsx",
        "path": "chart-bar.tsx",
        "content": "import { TrendingUpIcon } from \"lucide-react\";\nimport { Bar, BarChart, CartesianGrid, Legend, XAxis } from \"recharts\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@nui/core\";\n\nconst chartData = [\n  { month: \"Jan\", revenue: 1500, expenses: 1200 },\n  { month: \"Feb\", revenue: 3200, expenses: 2800 },\n  { month: \"Mar\", revenue: 2900, expenses: 2500 },\n  { month: \"Apr\", revenue: 2100, expenses: 1900 },\n  { month: \"May\", revenue: 4000, expenses: 3500 },\n  { month: \"Jun\", revenue: 3700, expenses: 3200 },\n];\n\nconst chartConfig = {\n  revenue: {\n    label: \"Revenue\",\n    color: \"var(--chart-1)\",\n  },\n  expenses: {\n    label: \"Expenses\",\n    color: \"var(--chart-3)\",\n  },\n} satisfies ChartConfig;\n\nexport default function ChartBarDemo() {\n  const totalRevenue = chartData.reduce((sum, item) => sum + item.revenue, 0);\n  const totalExpenses = chartData.reduce((sum, item) => sum + item.expenses, 0);\n  const netProfit = totalRevenue - totalExpenses;\n  const profitMargin = (netProfit / totalRevenue) * 100;\n\n  return (\n    <Card className=\"flex w-full flex-col\">\n      <CardHeader className=\"text-center\">\n        <CardTitle>Revenue vs Expenses</CardTitle>\n        <CardDescription>First half of 2024</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-1\">\n        <ChartContainer config={chartConfig} className=\"max-h-[300px] w-full\">\n          <BarChart\n            data={chartData}\n            margin={{\n              left: 12,\n              right: 12,\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <ChartTooltip\n              cursor={{ fill: \"var(--background)\" }}\n              content={<ChartTooltipContent />}\n            />\n            <Legend />\n            <Bar\n              dataKey=\"revenue\"\n              fill={chartConfig.revenue.color}\n              radius={[4, 4, 0, 0]}\n              maxBarSize={32}\n            />\n            <Bar\n              dataKey=\"expenses\"\n              fill={chartConfig.expenses.color}\n              radius={[4, 4, 0, 0]}\n              maxBarSize={32}\n            />\n          </BarChart>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col gap-2 text-sm leading-none\">\n        <div className=\"flex w-full justify-between font-medium\">\n          <span>Net Profit:</span>\n          <span>${netProfit.toLocaleString()}</span>\n        </div>\n        <div className=\"text-muted-foreground flex w-full justify-between\">\n          <span>Profit Margin:</span>\n          <span className=\"flex items-center gap-1\">\n            <TrendingUpIcon className=\"size-4\" />\n            {profitMargin.toFixed(1)}%\n          </span>\n        </div>\n        <div className=\"text-muted-foreground flex w-full justify-between\">\n          <span>Total Expenses:</span>\n          <span>${totalExpenses.toLocaleString()}</span>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "recharts"
    ],
    "path": ""
  },
  {
    "id": "chart-demo",
    "name": "Chart Demo",
    "description": "Chart Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "chart-demo.tsx",
        "path": "chart-demo.tsx",
        "content": "import { Bar, BarChart, CartesianGrid, XAxis } from \"recharts\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@nui/core\";\n\nconst chartData = [\n  { month: \"Jan\", revenue: 1500 },\n  { month: \"Feb\", revenue: 3200 },\n  { month: \"Mar\", revenue: 2900 },\n  { month: \"Apr\", revenue: 2100 },\n  { month: \"May\", revenue: 4000 },\n  { month: \"Jun\", revenue: 3700 },\n  { month: \"Jul\", revenue: 4300 },\n  { month: \"Aug\", revenue: 4900 },\n  { month: \"Sep\", revenue: 4700 },\n  { month: \"Oct\", revenue: 5200 },\n  { month: \"Nov\", revenue: 6000 },\n  { month: \"Dec\", revenue: 7200 },\n];\n\nconst chartConfig = {\n  revenue: {\n    label: \"Revenue\",\n    color: \"var(--chart-2)\",\n  },\n  expenses: {\n    label: \"Expenses\",\n    color: \"var(--chart-3)\",\n  },\n} satisfies ChartConfig;\n\nexport default function ChartDemo() {\n  const totalRevenue = chartData.reduce((sum, item) => sum + item.revenue, 0);\n  const averageRevenue = totalRevenue / chartData.length;\n  const highestRevenue = Math.max(...chartData.map((item) => item.revenue));\n\n  return (\n    <Card className=\"flex w-full flex-col\">\n      <CardHeader className=\"text-center\">\n        <CardTitle>Monthly Revenue</CardTitle>\n        <CardDescription>Performance overview for 2024</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-1\">\n        <ChartContainer config={chartConfig} className=\"max-h-[300px] w-full\">\n          <BarChart accessibilityLayer data={chartData}>\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n            />\n            <ChartTooltip\n              cursor={{ fill: \"var(--background)\" }}\n              content={<ChartTooltipContent />}\n            />\n            <Bar\n              dataKey=\"revenue\"\n              fill=\"var(--chart-2)\"\n              radius={[4, 4, 0, 0]}\n            />\n          </BarChart>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col gap-2 text-sm leading-none\">\n        <div className=\"flex w-full justify-between font-medium\">\n          <span>Total Revenue:</span>\n          <span>${totalRevenue.toLocaleString()}</span>\n        </div>\n        <div className=\"text-muted-foreground flex w-full justify-between\">\n          <span>Monthly Average:</span>\n          <span>\n            $\n            {averageRevenue.toLocaleString(undefined, {\n              maximumFractionDigits: 0,\n            })}\n          </span>\n        </div>\n        <div className=\"text-muted-foreground flex w-full justify-between\">\n          <span>Highest Month:</span>\n          <span>${highestRevenue.toLocaleString()}</span>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "recharts"
    ],
    "path": ""
  },
  {
    "id": "chart-line",
    "name": "Chart Line",
    "description": "Chart Line component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "chart-line.tsx",
        "path": "chart-line.tsx",
        "content": "import { CartesianGrid, Legend, Line, LineChart, XAxis } from \"recharts\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@nui/core\";\n\nconst chartData = [\n  { month: \"Jan\", users: 100, activeUsers: 80, newUsers: 20 },\n  { month: \"Feb\", users: 120, activeUsers: 90, newUsers: 30 },\n  { month: \"Mar\", users: 150, activeUsers: 100, newUsers: 50 },\n  { month: \"Apr\", users: 200, activeUsers: 140, newUsers: 60 },\n  { month: \"May\", users: 250, activeUsers: 180, newUsers: 70 },\n  { month: \"Jun\", users: 300, activeUsers: 220, newUsers: 80 },\n];\n\nconst chartConfig = {\n  users: {\n    label: \"Total Users\",\n    color: \"var(--chart-1)\",\n  },\n  activeUsers: {\n    label: \"Active Users\",\n    color: \"var(--chart-2)\",\n  },\n  newUsers: {\n    label: \"New Users\",\n    color: \"var(--chart-3)\",\n  },\n} satisfies ChartConfig;\n\nexport default function ChartLineDemo() {\n  const totalUsers = chartData[chartData.length - 1].users;\n  const totalActiveUsers = chartData[chartData.length - 1].activeUsers;\n  const userGrowth =\n    ((chartData[5].users - chartData[0].users) / chartData[0].users) * 100;\n  const activeUsersRate = (totalActiveUsers / totalUsers) * 100;\n\n  return (\n    <Card className=\"flex w-full flex-col\">\n      <CardHeader className=\"text-center\">\n        <CardTitle>User Growth</CardTitle>\n        <CardDescription>User metrics for first half of 2024</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-1\">\n        <ChartContainer config={chartConfig} className=\"max-h-[300px] w-full\">\n          <LineChart\n            data={chartData}\n            margin={{\n              left: 12,\n              right: 12,\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <ChartTooltip content={<ChartTooltipContent />} />\n            <Legend />\n            <Line\n              type=\"monotone\"\n              dataKey=\"users\"\n              stroke={chartConfig.users.color}\n              strokeWidth={2}\n              dot={false}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"activeUsers\"\n              stroke={chartConfig.activeUsers.color}\n              strokeWidth={2}\n              dot={false}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"newUsers\"\n              stroke={chartConfig.newUsers.color}\n              strokeWidth={2}\n              dot={false}\n            />\n          </LineChart>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col gap-2 text-sm leading-none\">\n        <div className=\"flex w-full justify-between font-medium\">\n          <span>Total Users:</span>\n          <span>{totalUsers.toLocaleString()}</span>\n        </div>\n        <div className=\"text-muted-foreground flex w-full justify-between\">\n          <span>Active Users Rate:</span>\n          <span>{activeUsersRate.toFixed(1)}%</span>\n        </div>\n        <div className=\"text-muted-foreground flex w-full justify-between\">\n          <span>6-Month Growth:</span>\n          <span>{userGrowth.toFixed(1)}%</span>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "recharts"
    ],
    "path": ""
  },
  {
    "id": "chart-pie",
    "name": "Chart Pie",
    "description": "Chart Pie component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "chart-pie.tsx",
        "path": "chart-pie.tsx",
        "content": "import { Cell, Legend, Pie, PieChart } from \"recharts\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@nui/core\";\n\nconst chartData = [\n  { category: \"Sales\", amount: 4000, fill: \"var(--chart-1)\" },\n  { category: \"Marketing\", amount: 3000, fill: \"var(--chart-2)\" },\n  { category: \"IT\", amount: 2000, fill: \"var(--chart-3)\" },\n  { category: \"HR\", amount: 1000, fill: \"var(--chart-4)\" },\n  { category: \"Operations\", amount: 1000, fill: \"var(--chart-5)\" },\n];\n\nconst chartConfig = {\n  sales: {\n    label: \"Sales\",\n    color: \"var(--chart-1)\",\n  },\n  marketing: {\n    label: \"Marketing\",\n    color: \"var(--chart-2)\",\n  },\n  it: {\n    label: \"IT\",\n    color: \"var(--chart-3)\",\n  },\n  hr: {\n    label: \"HR\",\n    color: \"var(--chart-4)\",\n  },\n  operations: {\n    label: \"Operations\",\n    color: \"var(--chart-5)\",\n  },\n} satisfies ChartConfig;\n\nexport default function ChartPieDemo() {\n  const totalBudget = chartData.reduce((sum, item) => sum + item.amount, 0);\n  const highestBudget = Math.max(...chartData.map((item) => item.amount));\n  const highestCategory = chartData.find(\n    (item) => item.amount === highestBudget,\n  )?.category;\n\n  return (\n    <Card className=\"flex w-full flex-col\">\n      <CardHeader className=\"pb-0 text-center\">\n        <CardTitle>Budget Distribution</CardTitle>\n        <CardDescription>Department budget allocation for 2024</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-1\">\n        <ChartContainer config={chartConfig} className=\"max-h-[300px] w-full\">\n          <PieChart>\n            <ChartTooltip\n              cursor={false}\n              content={<ChartTooltipContent hideLabel />}\n            />\n            <Legend />\n            <Pie\n              data={chartData}\n              dataKey=\"amount\"\n              nameKey=\"category\"\n              cx=\"50%\"\n              cy=\"50%\"\n            >\n              {chartData.map((entry) => (\n                <Cell key={entry.category} fill={entry.fill} />\n              ))}\n            </Pie>\n          </PieChart>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col gap-2 text-sm leading-none\">\n        <div className=\"flex w-full justify-between font-medium\">\n          <span>Total Budget:</span>\n          <span>${totalBudget.toLocaleString()}</span>\n        </div>\n        <div className=\"text-muted-foreground flex w-full justify-between\">\n          <span>Largest Department:</span>\n          <span>{highestCategory}</span>\n        </div>\n        <div className=\"text-muted-foreground flex w-full justify-between\">\n          <span>Highest Budget:</span>\n          <span>${highestBudget.toLocaleString()}</span>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "recharts"
    ],
    "path": ""
  },
  {
    "id": "chart-radar",
    "name": "Chart Radar",
    "description": "Chart Radar component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "chart-radar.tsx",
        "path": "chart-radar.tsx",
        "content": "import { Legend, PolarAngleAxis, PolarGrid, Radar, RadarChart } from \"recharts\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@nui/core\";\n\nconst chartData = [\n  { category: \"Performance\", a: 90, b: 60 },\n  { category: \"Reliability\", a: 75, b: 90 },\n  { category: \"Scalability\", a: 95, b: 90 },\n  { category: \"Security\", a: 88, b: 65 },\n  { category: \"Usability\", a: 92, b: 88 },\n];\n\nconst chartConfig = {\n  a: {\n    label: \"Product A\",\n    color: \"var(--chart-1)\",\n  },\n  b: {\n    label: \"Product B\",\n    color: \"var(--chart-2)\",\n  },\n} satisfies ChartConfig;\n\nexport default function ChartRadarDemo() {\n  const productAAverage =\n    chartData.reduce((sum, item) => sum + item.a, 0) / chartData.length;\n  const productBAverage =\n    chartData.reduce((sum, item) => sum + item.b, 0) / chartData.length;\n  const bestPerformer =\n    productAAverage > productBAverage ? \"Product A\" : \"Product B\";\n\n  return (\n    <Card className=\"flex w-full flex-col\">\n      <CardHeader className=\"text-center\">\n        <CardTitle>Product Comparison</CardTitle>\n        <CardDescription>\n          Performance metrics across key categories\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-1\">\n        <ChartContainer config={chartConfig} className=\"max-h-[300px] w-full\">\n          <RadarChart data={chartData}>\n            <PolarGrid />\n            <PolarAngleAxis dataKey=\"category\" />\n            <ChartTooltip content={<ChartTooltipContent />} />\n            <Legend />\n            <Radar\n              name=\"Product A\"\n              dataKey=\"a\"\n              stroke={chartConfig.a.color}\n              fill={chartConfig.a.color}\n              fillOpacity={0.2}\n            />\n            <Radar\n              name=\"Product B\"\n              dataKey=\"b\"\n              stroke={chartConfig.b.color}\n              fill={chartConfig.b.color}\n              fillOpacity={0.2}\n            />\n          </RadarChart>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col gap-2 text-sm leading-none\">\n        <div className=\"flex w-full justify-between font-medium\">\n          <span>Best Overall:</span>\n          <span>{bestPerformer}</span>\n        </div>\n        <div className=\"text-muted-foreground flex w-full justify-between\">\n          <span>Product A Average:</span>\n          <span>{productAAverage.toFixed(1)}%</span>\n        </div>\n        <div className=\"text-muted-foreground flex w-full justify-between\">\n          <span>Product B Average:</span>\n          <span>{productBAverage.toFixed(1)}%</span>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "recharts"
    ],
    "path": ""
  },
  {
    "id": "chart-radial-bar",
    "name": "Chart Radial Bar",
    "description": "Chart Radial Bar component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "chart-radial-bar.tsx",
        "path": "chart-radial-bar.tsx",
        "content": "import { RadialBar, RadialBarChart } from \"recharts\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@nui/core\";\n\nconst chartData = [\n  { browser: \"chrome\", visitors: 540, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 410, fill: \"var(--color-safari)\" },\n  { browser: \"firefox\", visitors: 262, fill: \"var(--color-firefox)\" },\n  { browser: \"edge\", visitors: 160, fill: \"var(--color-edge)\" },\n  { browser: \"other\", visitors: 100, fill: \"var(--color-other)\" },\n];\n\nconst chartConfig = {\n  visitors: {\n    label: \"Visitors\",\n  },\n  chrome: {\n    label: \"Chrome\",\n    color: \"var(--chart-1)\",\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"var(--chart-2)\",\n  },\n  firefox: {\n    label: \"Firefox\",\n    color: \"var(--chart-3)\",\n  },\n  edge: {\n    label: \"Edge\",\n    color: \"var(--chart-4)\",\n  },\n  other: {\n    label: \"Other\",\n    color: \"var(--chart-5)\",\n  },\n} satisfies ChartConfig;\n\nexport default function ChartRadialBarDemo() {\n  const totalVisitors = chartData.reduce((sum, item) => sum + item.visitors, 0);\n  const highestVisitors = Math.max(...chartData.map((item) => item.visitors));\n  const topBrowser = chartData.find(\n    (item) => item.visitors === highestVisitors,\n  )?.browser;\n\n  return (\n    <Card className=\"flex w-full flex-col\">\n      <CardHeader className=\"text-center\">\n        <CardTitle>Browser Usage</CardTitle>\n        <CardDescription>Visitor distribution by browser</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-1\">\n        <ChartContainer\n          config={chartConfig}\n          className=\"mx-auto aspect-square max-h-[250px]\"\n        >\n          <RadialBarChart data={chartData} innerRadius={30} outerRadius={110}>\n            <ChartTooltip\n              cursor={false}\n              content={<ChartTooltipContent hideLabel nameKey=\"browser\" />}\n            />\n            <RadialBar dataKey=\"visitors\" background />\n          </RadialBarChart>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col gap-2 text-sm leading-none\">\n        <div className=\"flex w-full justify-between font-medium\">\n          <span>Total Visitors:</span>\n          <span>{totalVisitors.toLocaleString()}</span>\n        </div>\n        <div className=\"text-muted-foreground flex w-full justify-between\">\n          <span>Most Used Browser:</span>\n          <span className=\"capitalize\">{topBrowser}</span>\n        </div>\n        <div className=\"text-muted-foreground flex w-full justify-between\">\n          <span>Peak Visitors:</span>\n          <span>{highestVisitors.toLocaleString()}</span>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "recharts"
    ],
    "path": ""
  },
  {
    "id": "chart-scatter",
    "name": "Chart Scatter",
    "description": "Chart Scatter component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "chart-scatter.tsx",
        "path": "chart-scatter.tsx",
        "content": "import {\n  CartesianGrid,\n  Scatter,\n  ScatterChart,\n  XAxis,\n  YAxis,\n  ZAxis,\n} from \"recharts\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  type ChartConfig,\n} from \"@nui/core\";\n\nconst chartData = [\n  { population: 850000, price: 425000, city: \"San Francisco\" },\n  { population: 2700000, price: 385000, city: \"Chicago\" },\n  { population: 8400000, price: 750000, city: \"New York\" },\n  { population: 4000000, price: 890000, city: \"Los Angeles\" },\n  { population: 2300000, price: 350000, city: \"Houston\" },\n  { population: 1600000, price: 420000, city: \"Philadelphia\" },\n  { population: 730000, price: 480000, city: \"Seattle\" },\n  { population: 690000, price: 445000, city: \"Boston\" },\n  { population: 710000, price: 320000, city: \"Denver\" },\n  { population: 950000, price: 295000, city: \"Austin\" },\n];\n\nconst chartConfig = {\n  scatter: {\n    label: \"Cities\",\n    color: \"var(--chart-1)\",\n  },\n} satisfies ChartConfig;\n\nexport default function ChartScatterDemo() {\n  const averagePrice =\n    chartData.reduce((sum, item) => sum + item.price, 0) / chartData.length;\n  const highestPrice = Math.max(...chartData.map((item) => item.price));\n  const mostExpensiveCity = chartData.find(\n    (item) => item.price === highestPrice,\n  )?.city;\n\n  return (\n    <Card className=\"flex w-full flex-col\">\n      <CardHeader className=\"text-center\">\n        <CardTitle>Housing Market Analysis</CardTitle>\n        <CardDescription>\n          Population vs House Prices in Major Cities\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig} className=\"max-h-[300px] w-full\">\n          <ScatterChart>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              type=\"number\"\n              dataKey=\"price\"\n              name=\"Average House Price\"\n              unit=\"$\"\n              tickLine={false}\n              axisLine={false}\n              tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n            />\n            <YAxis\n              type=\"number\"\n              dataKey=\"population\"\n              name=\"Population\"\n              tickLine={false}\n              axisLine={false}\n              tickFormatter={(value) => `${(value / 1000000).toFixed(1)}M`}\n            />\n            <ZAxis type=\"category\" dataKey=\"city\" name=\"City\" />\n            <ChartTooltip\n              content={\n                <ChartTooltipContent\n                  nameKey=\"city\"\n                  labelKey=\"price\"\n                  hideIndicator\n                />\n              }\n            />\n            <Scatter\n              name=\"Cities\"\n              data={chartData}\n              fill={chartConfig.scatter.color}\n            />\n          </ScatterChart>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col gap-2 text-sm leading-none\">\n        <div className=\"flex w-full justify-between font-medium\">\n          <span>Most Expensive City:</span>\n          <span>{mostExpensiveCity}</span>\n        </div>\n        <div className=\"text-muted-foreground flex w-full justify-between\">\n          <span>Average House Price:</span>\n          <span>${averagePrice.toLocaleString()}</span>\n        </div>\n        <div className=\"text-muted-foreground flex w-full justify-between\">\n          <span>Highest House Price:</span>\n          <span>${highestPrice.toLocaleString()}</span>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "checkbox-demo",
    "name": "Checkbox Demo",
    "description": "Checkbox Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "checkbox-demo.tsx",
        "path": "checkbox-demo.tsx",
        "content": "import { Checkbox } from \"@nui/core\";\n\nexport default function CheckboxDemo() {\n  return <Checkbox />;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "checkbox-disabled",
    "name": "Checkbox Disabled",
    "description": "Checkbox Disabled component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "checkbox-disabled.tsx",
        "path": "checkbox-disabled.tsx",
        "content": "import { Checkbox } from \"@nui/core\";\n\nexport default function CheckboxDisabled() {\n  return <Checkbox disabled />;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "checkbox-error",
    "name": "Checkbox Error",
    "description": "Checkbox Error component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "checkbox-error.tsx",
        "path": "checkbox-error.tsx",
        "content": "import { Checkbox } from \"@nui/core\";\n\nexport default function CheckboxError() {\n  return <Checkbox aria-invalid />;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "checkbox-group-demo",
    "name": "Checkbox Group Demo",
    "description": "Checkbox Group Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "checkbox-group-demo.tsx",
        "path": "checkbox-group-demo.tsx",
        "content": "import { useState } from \"react\";\nimport { Checkbox, CheckboxGroup, Label } from \"@nui/core\";\n\nconst groceries = [\"milk\", \"cheese\", \"bread\", \"apples\"];\n\nexport default function CheckboxGroupDemo() {\n  const [checkedItems, setCheckedItems] = useState<string[]>([]);\n\n  return (\n    <CheckboxGroup\n      aria-labelledby=\"groceries\"\n      value={checkedItems}\n      onValueChange={(value) => setCheckedItems(value)}\n      allValues={groceries}\n    >\n      <Label className=\"flex items-center gap-2\">\n        <Checkbox\n          parent\n          indeterminate={\n            checkedItems.length > 0 && checkedItems.length !== groceries.length\n          }\n        />\n        Groceries\n      </Label>\n\n      {groceries.map((grocery) => (\n        <Label className=\"ml-4 flex items-center gap-2\" key={grocery}>\n          <Checkbox name={grocery} />\n          {grocery.charAt(0).toUpperCase() + grocery.slice(1)}\n        </Label>\n      ))}\n    </CheckboxGroup>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "checkbox-with-label",
    "name": "Checkbox With Label",
    "description": "Checkbox With Label component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "checkbox-with-label.tsx",
        "path": "checkbox-with-label.tsx",
        "content": "import { Checkbox, Label } from \"@nui/core\";\n\nexport default function CheckboxWithLabel() {\n  return (\n    <Label className=\"flex items-center gap-2\">\n      <Checkbox />\n      Accept\n    </Label>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "collapsible-demo",
    "name": "Collapsible Demo",
    "description": "Collapsible Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "collapsible-demo.tsx",
        "path": "collapsible-demo.tsx",
        "content": "import { useState } from \"react\";\nimport { ChevronRightIcon } from \"lucide-react\";\nimport {\n  cn,\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@nui/core\";\n\nexport default function CollapsibleDemo() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Collapsible\n      className=\"mx-auto w-40 py-12\"\n      open={open}\n      onOpenChange={setOpen}\n    >\n      <CollapsibleTrigger className=\"bg-card flex w-full items-center justify-between rounded-sm border px-2 py-1\">\n        <span className=\"text-sm font-medium\">Components</span>\n        <div className={cn(\"transition-all duration-200\", open && \"rotate-90\")}>\n          <ChevronRightIcon size={16} />\n        </div>\n      </CollapsibleTrigger>\n      <CollapsibleContent>\n        <ol className=\"bg-card mt-2 space-y-1 rounded-sm border py-1 font-medium\">\n          <li className=\"px-2 py-1\">Button</li>\n          <li className=\"px-2 py-1\">Badge</li>\n          <li className=\"px-2 py-1\">Breadcrumbs</li>\n        </ol>\n      </CollapsibleContent>\n    </Collapsible>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react",
      "lucide-react"
    ],
    "path": ""
  },
  {
    "id": "combobox-demo",
    "name": "Combobox Demo",
    "description": "Combobox Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "combobox-demo.tsx",
        "path": "combobox-demo.tsx",
        "content": "import * as React from \"react\";\nimport { Check, ChevronsUpDownIcon } from \"lucide-react\";\nimport {\n  Button,\n  cn,\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@nui/core\";\n\nconst statuses = [\n  {\n    value: \"backlog\",\n    label: \"Backlog\",\n    color: \"bg-slate-500\",\n  },\n  {\n    value: \"todo\",\n    label: \"Todo\",\n    color: \"bg-blue-500\",\n  },\n  {\n    value: \"in-progress\",\n    label: \"In Progress\",\n    color: \"bg-yellow-500\",\n  },\n  {\n    value: \"done\",\n    label: \"Done\",\n    color: \"bg-green-500\",\n  },\n  {\n    value: \"canceled\",\n    label: \"Canceled\",\n    color: \"bg-red-500\",\n  },\n];\n\nexport default function ComboboxDemo() {\n  const [open, setOpen] = React.useState(false);\n  const [value, setValue] = React.useState(\"todo\");\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger\n        render={(props) => (\n          <Button\n            {...props}\n            variant=\"outline\"\n            aria-expanded={open}\n            className=\"w-[250px] justify-between\"\n          >\n            {value && (\n              <div className=\"flex items-center gap-2\">\n                <div\n                  className={cn(\n                    \"size-2 rounded-full\",\n                    statuses.find((status) => status.value === value)?.color,\n                  )}\n                />\n                {statuses.find((status) => status.value === value)?.label}\n              </div>\n            )}\n            <ChevronsUpDownIcon className=\"ml-2 size-4 shrink-0 opacity-50\" />\n          </Button>\n        )}\n      />\n      <PopoverContent className=\"w-[250px] p-0\" sideOffset={4} arrow={false}>\n        <Command>\n          <CommandInput\n            placeholder=\"Search status...\"\n            className=\"border-none focus:ring-0\"\n          />\n          <CommandList>\n            <CommandEmpty>No status found.</CommandEmpty>\n            <CommandGroup>\n              {statuses.map((status) => (\n                <CommandItem\n                  key={status.value}\n                  value={status.value}\n                  onSelect={(currentValue) => {\n                    setValue(currentValue);\n                    setOpen(false);\n                  }}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <div className={cn(\"size-2 rounded-full\", status.color)} />\n                    <span>{status.label}</span>\n                  </div>\n                  {value === status.value && (\n                    <Check className=\"ml-auto size-4 shrink-0 opacity-50\" />\n                  )}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react",
      "lucide-react"
    ],
    "path": ""
  },
  {
    "id": "command-demo",
    "name": "Command Demo",
    "description": "Command Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "command-demo.tsx",
        "path": "command-demo.tsx",
        "content": "import {\n  ArrowRightIcon,\n  LayoutGridIcon,\n  PlusIcon,\n  UsersIcon,\n} from \"lucide-react\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n  Kbd,\n} from \"@nui/core\";\n\nexport default function CommandDemo() {\n  return (\n    <Command>\n      <CommandInput placeholder=\"Type a command or search...\" />\n      <CommandList>\n        <CommandEmpty>No results found.</CommandEmpty>\n        <CommandGroup heading=\"Projects\">\n          <CommandItem>\n            <LayoutGridIcon />\n            <span>Search projects...</span>\n            <CommandShortcut>\n              <Kbd>⌘</Kbd>\n              <Kbd>P</Kbd>\n            </CommandShortcut>\n          </CommandItem>\n          <CommandItem>\n            <PlusIcon />\n            <span>Create new projecte...</span>\n            <CommandShortcut>\n              <Kbd>C</Kbd>\n            </CommandShortcut>\n          </CommandItem>\n        </CommandGroup>\n        <CommandSeparator />\n        <CommandGroup heading=\"Teams\">\n          <CommandItem>\n            <UsersIcon />\n            <span>Search teams...</span>\n          </CommandItem>\n          <CommandItem>\n            <PlusIcon />\n            <span>Create new team...</span>\n            <CommandShortcut>\n              <Kbd>T</Kbd>\n            </CommandShortcut>\n          </CommandItem>\n        </CommandGroup>\n        <CommandGroup heading=\"Navigation\">\n          <CommandItem>\n            <ArrowRightIcon />\n            <span>Go to home</span>\n          </CommandItem>\n          <CommandItem>\n            <ArrowRightIcon />\n            <span>Go to profile</span>\n          </CommandItem>\n          <CommandItem>\n            <ArrowRightIcon />\n            <span>Go to settings</span>\n          </CommandItem>\n          <CommandItem>\n            <ArrowRightIcon />\n            <span>Go to billing</span>\n          </CommandItem>\n        </CommandGroup>\n      </CommandList>\n    </Command>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "command-dialog",
    "name": "Command Dialog",
    "description": "Command Dialog component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "command-dialog.tsx",
        "path": "command-dialog.tsx",
        "content": "import { useEffect, useState } from \"react\";\nimport {\n  ArrowRightIcon,\n  LayoutGridIcon,\n  PlusIcon,\n  UsersIcon,\n} from \"lucide-react\";\nimport {\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n  Kbd,\n} from \"@nui/core\";\n\nexport default function CommandDialogDemo() {\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        setOpen((open) => !open);\n      }\n    };\n    document.addEventListener(\"keydown\", down);\n    return () => document.removeEventListener(\"keydown\", down);\n  }, []);\n\n  return (\n    <>\n      <div className=\"flex items-center gap-2 text-sm\">\n        <Kbd>⌘</Kbd>+<Kbd>K</Kbd>\n      </div>\n      <CommandDialog open={open} onOpenChange={setOpen}>\n        <CommandInput placeholder=\"Type a command or search...\" />\n        <CommandList>\n          <CommandEmpty>No results found.</CommandEmpty>\n          <CommandGroup heading=\"Projects\">\n            <CommandItem>\n              <LayoutGridIcon />\n              <span>Search projects...</span>\n              <CommandShortcut>\n                <Kbd>⌘</Kbd>\n                <Kbd>P</Kbd>\n              </CommandShortcut>\n            </CommandItem>\n            <CommandItem>\n              <PlusIcon />\n              <span>Create new projecte...</span>\n              <CommandShortcut>\n                <Kbd>C</Kbd>\n              </CommandShortcut>\n            </CommandItem>\n          </CommandGroup>\n          <CommandSeparator />\n          <CommandGroup heading=\"Teams\">\n            <CommandItem>\n              <UsersIcon />\n              <span>Search teams...</span>\n            </CommandItem>\n            <CommandItem>\n              <PlusIcon />\n              <span>Create new team...</span>\n              <CommandShortcut>\n                <Kbd>T</Kbd>\n              </CommandShortcut>\n            </CommandItem>\n          </CommandGroup>\n          <CommandGroup heading=\"Navigation\">\n            <CommandItem>\n              <ArrowRightIcon />\n              <span>Go to home</span>\n            </CommandItem>\n            <CommandItem>\n              <ArrowRightIcon />\n              <span>Go to profile</span>\n            </CommandItem>\n            <CommandItem>\n              <ArrowRightIcon />\n              <span>Go to settings</span>\n            </CommandItem>\n            <CommandItem>\n              <ArrowRightIcon />\n              <span>Go to billing</span>\n            </CommandItem>\n          </CommandGroup>\n        </CommandList>\n      </CommandDialog>\n    </>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react"
    ],
    "path": ""
  },
  {
    "id": "context-menu-demo",
    "name": "Context Menu Demo",
    "description": "Context Menu Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "context-menu-demo.tsx",
        "path": "context-menu-demo.tsx",
        "content": "import {\n  ContextMenu,\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuGroup,\n  ContextMenuItem,\n  ContextMenuLabel,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuTrigger,\n} from \"@nui/core\";\n\nexport default function ContextMenuDemo() {\n  return (\n    <div className=\"w-80\">\n      <ContextMenu>\n        <ContextMenuTrigger className=\"flex aspect-video w-full items-center justify-center rounded-lg border border-dashed text-sm\">\n          Right Click Here\n        </ContextMenuTrigger>\n        <ContextMenuContent>\n          <ContextMenuGroup>\n            <ContextMenuItem>\n              Back\n              <ContextMenuShortcut>⌘[</ContextMenuShortcut>\n            </ContextMenuItem>\n            <ContextMenuItem disabled>\n              Forward\n              <ContextMenuShortcut>⌘]</ContextMenuShortcut>\n            </ContextMenuItem>\n            <ContextMenuItem>\n              Reload\n              <ContextMenuShortcut>⌘R</ContextMenuShortcut>\n            </ContextMenuItem>\n            <ContextMenuSub>\n              <ContextMenuSubTrigger>More</ContextMenuSubTrigger>\n              <ContextMenuSubContent>\n                <ContextMenuItem>Save As</ContextMenuItem>\n                <ContextMenuItem>Print</ContextMenuItem>\n                <ContextMenuItem>Cast</ContextMenuItem>\n                <ContextMenuSeparator />\n                <ContextMenuItem>Inspect</ContextMenuItem>\n              </ContextMenuSubContent>\n            </ContextMenuSub>\n          </ContextMenuGroup>\n          <ContextMenuSeparator />\n          <ContextMenuGroup>\n            <ContextMenuLabel>Settings</ContextMenuLabel>\n            <ContextMenuCheckboxItem>Always on Top</ContextMenuCheckboxItem>\n            <ContextMenuCheckboxItem>Show full URL</ContextMenuCheckboxItem>\n          </ContextMenuGroup>\n          <ContextMenuSeparator />\n          <ContextMenuGroup>\n            <ContextMenuLabel>Zoom</ContextMenuLabel>\n            <ContextMenuRadioGroup defaultValue=\"100\">\n              <ContextMenuRadioItem value=\"50\">50%</ContextMenuRadioItem>\n              <ContextMenuRadioItem value=\"100\">100%</ContextMenuRadioItem>\n              <ContextMenuRadioItem value=\"150\">150%</ContextMenuRadioItem>\n            </ContextMenuRadioGroup>\n          </ContextMenuGroup>\n        </ContextMenuContent>\n      </ContextMenu>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "date-picker-demo",
    "name": "Date Picker Demo",
    "description": "Date Picker Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "date-picker-demo.tsx",
        "path": "date-picker-demo.tsx",
        "content": "import { useState } from \"react\";\nimport dayjs from \"dayjs\";\nimport { CalendarIcon, ChevronsUpDownIcon } from \"lucide-react\";\nimport {\n  Button,\n  Calendar,\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@nui/core\";\n\nexport default function DatePickerDemo() {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState<Date | undefined>(undefined);\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger\n        render={(props) => (\n          <Button\n            {...props}\n            variant=\"outline\"\n            className=\"w-[250px] justify-between\"\n          >\n            <div className=\"flex items-center\">\n              <CalendarIcon className=\"mr-2 size-4\" />\n              {value ? (\n                <span>{dayjs(value).format(\"DD MMMM YYYY\")}</span>\n              ) : (\n                <span>Select a date</span>\n              )}\n            </div>\n            <ChevronsUpDownIcon className=\"ml-2 size-4 shrink-0 opacity-50\" />\n          </Button>\n        )}\n      />\n      <PopoverContent className=\"w-[250px] p-0\" sideOffset={4} arrow={false}>\n        <Calendar\n          className=\"border-0\"\n          mode=\"single\"\n          showOutsideDays\n          selected={value}\n          onSelect={setValue}\n        />\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react",
      "dayjs",
      "lucide-react"
    ],
    "path": ""
  },
  {
    "id": "dialog-demo",
    "name": "Dialog Demo",
    "description": "Dialog Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "dialog-demo.tsx",
        "path": "dialog-demo.tsx",
        "content": "import {\n  Button,\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@nui/core\";\n\nexport default function DialogDemo() {\n  return (\n    <Dialog>\n      <DialogTrigger\n        render={(props) => <Button {...props}>Privacy Policy</Button>}\n      />\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Privacy Policy</DialogTitle>\n          <DialogDescription>\n            Please read our privacy policy carefully.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"text-foreground max-h-80 overflow-y-auto text-sm outline-none\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed\n          ultricies, odio quis blandit vestibulum, orci elit suscipit urna, at\n          lobortis arcu enim vel purus. Maecenas luctus sem dui, lobortis\n          dignissim enim consequat in. Nullam a volutpat purus. Aenean\n          pellentesque eros nec rutrum suscipit. Fusce ac lectus volutpat,\n          feugiat nulla et, suscipit dui. Pellentesque habitant morbi tristique\n          senectus et netus et malesuada fames ac turpis egestas. Ut maximus,\n          risus et convallis placerat, risus urna feugiat neque, in vestibulum\n          leo arcu vitae justo. Duis magna mi, maximus at neque sed, tempor\n          congue ligula. In iaculis metus nec euismod egestas. Donec id\n          porttitor nulla. Donec feugiat iaculis lacus, ut elementum dui\n          faucibus sed. Sed ut ipsum non tellus dignissim accumsan. Vivamus\n          luctus malesuada lacus sed dictum.\n          <br />\n          <br />\n          Sed consectetur nibh mollis, ornare magna et, dictum tellus. Nam\n          viverra dui a enim iaculis, sed blandit orci consectetur. Maecenas et\n          nisi eleifend velit pretium eleifend sit amet eget nisl. Vestibulum\n          eget ipsum semper purus pulvinar iaculis. Sed ut odio eu felis\n          porttitor ultrices eu sed odio. Nullam lorem sapien, pellentesque\n          convallis libero vel, tempus accumsan nisi. Morbi efficitur ex vitae\n          felis luctus cursus. Suspendisse nibh neque, gravida sed elementum\n          ullamcorper, gravida in nisi. Donec et luctus metus. Fusce sed est\n          dictum, imperdiet nisi eu, suscipit odio. In id enim at tortor\n          malesuada vulputate eu eu sem. Mauris blandit faucibus euismod.\n          <br />\n          <br />\n          Curabitur quam tortor, tristique euismod finibus viverra, bibendum sit\n          amet nisl. Nulla lobortis pharetra mauris, ac semper urna tempor et.\n          Maecenas enim magna, suscipit nec metus id, ornare pulvinar dolor.\n          Cras rhoncus ante sit amet tempus luctus. Donec in nisl a dolor auctor\n          tincidunt. Cras at arcu tortor. Pellentesque ante felis, convallis sit\n          amet erat id, consectetur consequat sapien. Aliquam volutpat velit in\n          est bibendum, vestibulum commodo leo interdum. Integer sodales ex eu\n          tempus faucibus. Vestibulum ultricies erat vel leo accumsan posuere.\n          Cras commodo felis vitae lacus suscipit, in tristique lectus\n          venenatis. Sed et nibh urna. Praesent vitae eleifend turpis. Fusce sit\n          amet pretium lorem, in tempus elit. Etiam at ornare est. Aenean felis\n          arcu, fermentum scelerisque nibh at, lacinia sagittis neque.\n        </div>\n        <DialogFooter>\n          <Button className=\"w-full\">Accept</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "dialog-nested",
    "name": "Dialog Nested",
    "description": "Dialog Nested component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "dialog-nested.tsx",
        "path": "dialog-nested.tsx",
        "content": "import {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n  Button,\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@nui/core\";\n\nexport default function DialogNested() {\n  return (\n    <Dialog>\n      <DialogTrigger\n        render={(props) => <Button {...props}>View Details</Button>}\n      />\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Profile</DialogTitle>\n          <DialogDescription>\n            View and edit your profile details.\n          </DialogDescription>\n        </DialogHeader>\n        <div>\n          <div className=\"flex items-center gap-4\">\n            <Avatar>\n              <AvatarImage src=\"/avatars/bora.png\" />\n              <AvatarFallback>BB</AvatarFallback>\n            </Avatar>\n            <span className=\"text-foreground\">Bora Baloglu</span>\n          </div>\n        </div>\n        <DialogFooter>\n          <Dialog>\n            <DialogTrigger\n              render={(props) => (\n                <Button {...props} variant=\"outline\">\n                  Edit\n                </Button>\n              )}\n            />\n            <DialogContent>\n              <DialogTitle>Edit</DialogTitle>\n              <DialogDescription>\n                Edit the details of the item\n              </DialogDescription>\n              <DialogFooter>\n                <DialogClose\n                  render={(props) => (\n                    <Button {...props} variant=\"ghost\">\n                      Cancel\n                    </Button>\n                  )}\n                />\n                <Button>Save</Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "drawer-demo",
    "name": "Drawer Demo",
    "description": "Drawer Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "drawer-demo.tsx",
        "path": "drawer-demo.tsx",
        "content": "import { useState } from \"react\";\nimport { StarIcon } from \"lucide-react\";\nimport {\n  Button,\n  cn,\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n  Textarea,\n} from \"@nui/core\";\n\nexport default function DrawerDemo() {\n  const [rating, setRating] = useState<number | undefined>(undefined);\n\n  const handleChangeRating = (newRating: number) => {\n    if (newRating === rating) {\n      setRating(undefined);\n    } else {\n      setRating(newRating);\n    }\n  };\n\n  return (\n    <Drawer shouldScaleBackground>\n      <DrawerTrigger\n        render={(props) => <Button {...props}>Open Drawer</Button>}\n      />\n      <DrawerContent>\n        <div className=\"mx-auto w-full max-w-md\">\n          <DrawerHeader>\n            <DrawerTitle>Provide Your Feedback</DrawerTitle>\n            <DrawerDescription>\n              We value your feedback. Please rate your experience and leave a\n              review.\n            </DrawerDescription>\n          </DrawerHeader>\n\n          <div className=\"flex flex-col gap-4 px-4\">\n            <div className=\"flex gap-2\">\n              {[1, 2, 3, 4, 5].map((star) => (\n                <StarIcon\n                  key={star}\n                  className={cn(\n                    \"size-8 cursor-pointer transition-all\",\n                    rating && star <= rating\n                      ? \"fill-yellow-300 text-yellow-300\"\n                      : \"text-muted-foreground fill-none\",\n                  )}\n                  onClick={() => handleChangeRating(star)}\n                />\n              ))}\n            </div>\n            <Textarea placeholder=\"Write a review\" />\n          </div>\n\n          <DrawerFooter>\n            <Button className=\"w-full\">Submit</Button>\n            <DrawerClose\n              render={(props) => (\n                <Button {...props} variant=\"outline\" className=\"w-full\">\n                  Cancel\n                </Button>\n              )}\n            />\n          </DrawerFooter>\n        </div>\n      </DrawerContent>\n    </Drawer>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react",
      "lucide-react"
    ],
    "path": ""
  },
  {
    "id": "dropdown-menu-demo",
    "name": "Dropdown Menu Demo",
    "description": "Dropdown Menu Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "dropdown-menu-demo.tsx",
        "path": "dropdown-menu-demo.tsx",
        "content": "import { useState } from \"react\";\nimport {\n  PauseIcon,\n  PlayIcon,\n  SkipBackIcon,\n  SkipForwardIcon,\n} from \"lucide-react\";\nimport {\n  Button,\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from \"@nui/core\";\n\nexport default function DropdownDemo() {\n  const [shuffle, setShuffle] = useState(false);\n  const [repeat, setRepeat] = useState(false);\n  const [sortBy, setSortBy] = useState(\"artist\");\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger\n        render={(props) => <Button {...props}>Controls</Button>}\n      />\n      <DropdownMenuContent>\n        <DropdownMenuGroup>\n          <DropdownMenuLabel>Playback</DropdownMenuLabel>\n          <DropdownMenuItem>\n            <PlayIcon />\n            Play\n            <DropdownMenuShortcut>⌘P</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            <PauseIcon />\n            Pause\n            <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            <SkipBackIcon />\n            Previous\n            <DropdownMenuShortcut>⌘[</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            <SkipForwardIcon />\n            Next\n            <DropdownMenuShortcut>⌘]</DropdownMenuShortcut>\n          </DropdownMenuItem>\n        </DropdownMenuGroup>\n        <DropdownMenuSeparator />\n        <DropdownMenuCheckboxItem\n          checked={shuffle}\n          onCheckedChange={setShuffle}\n        >\n          Shuffle\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem checked={repeat} onCheckedChange={setRepeat}>\n          Repeat\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem disabled>\n          Enhanced Audio\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuGroup>\n          <DropdownMenuLabel>Sort by</DropdownMenuLabel>\n          <DropdownMenuRadioGroup value={sortBy} onValueChange={setSortBy}>\n            <DropdownMenuRadioItem value=\"artist\">Artist</DropdownMenuRadioItem>\n            <DropdownMenuRadioItem value=\"album\">Repeat</DropdownMenuRadioItem>\n            <DropdownMenuRadioItem value=\"title\">Title</DropdownMenuRadioItem>\n          </DropdownMenuRadioGroup>\n        </DropdownMenuGroup>\n        <DropdownMenuSeparator />\n        <DropdownMenuSub>\n          <DropdownMenuSubTrigger>Add to Playlist</DropdownMenuSubTrigger>\n          <DropdownMenuSubContent>\n            <DropdownMenuItem>Jazz</DropdownMenuItem>\n            <DropdownMenuItem>Rock</DropdownMenuItem>\n            <DropdownMenuItem>Pop</DropdownMenuItem>\n          </DropdownMenuSubContent>\n        </DropdownMenuSub>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react"
    ],
    "path": ""
  },
  {
    "id": "emoji-picker-demo",
    "name": "Emoji Picker Demo",
    "description": "Emoji Picker Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "emoji-picker-demo.tsx",
        "path": "emoji-picker-demo.tsx",
        "content": "import { Loader2 } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport {\n  EmojiPicker,\n  EmojiPickerContent,\n  EmojiPickerEmpty,\n  EmojiPickerList,\n  EmojiPickerLoading,\n  EmojiPickerSearch,\n} from \"@nui/core\";\n\nexport default function EmojiPickerDemo() {\n  return (\n    <EmojiPicker\n      onEmojiSelect={({ emoji, label }) => {\n        toast(() => (\n          <p className=\"flex items-center gap-2 text-sm\">\n            <span className=\"text-lg\">{emoji}</span>\n            {label}\n          </p>\n        ));\n      }}\n    >\n      <EmojiPickerSearch />\n      <EmojiPickerContent>\n        <EmojiPickerLoading>\n          <Loader2 className=\"size-4 animate-spin\" />\n        </EmojiPickerLoading>\n        <EmojiPickerEmpty>No results</EmojiPickerEmpty>\n        <EmojiPickerList />\n      </EmojiPickerContent>\n    </EmojiPicker>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "sonner"
    ],
    "path": ""
  },
  {
    "id": "emoji-picker-popover",
    "name": "Emoji Picker Popover",
    "description": "Emoji Picker Popover component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "emoji-picker-popover.tsx",
        "path": "emoji-picker-popover.tsx",
        "content": "import { useState } from \"react\";\nimport { Loader2 } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport {\n  Button,\n  EmojiPicker,\n  EmojiPickerContent,\n  EmojiPickerEmpty,\n  EmojiPickerList,\n  EmojiPickerLoading,\n  EmojiPickerSearch,\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@nui/core\";\n\nexport default function EmojiPickerPopoverDemo() {\n  const [open, setOpen] = useState(false);\n  const [emoji, setEmoji] = useState<string | undefined>(undefined);\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger\n        render={(props) => (\n          <Button {...props} variant=\"outline\" size=\"icon\">\n            {emoji ? emoji : \"👇\"}\n          </Button>\n        )}\n      />\n      <PopoverContent className=\"rounded-md p-0 outline-offset-0\">\n        <EmojiPicker\n          className=\"border-none\"\n          onEmojiSelect={({ emoji, label }) => {\n            setEmoji(emoji);\n            setOpen(false);\n            toast(() => (\n              <p className=\"flex items-center gap-2 text-sm\">\n                <span className=\"text-lg\">{emoji}</span>\n                {label}\n              </p>\n            ));\n          }}\n        >\n          <EmojiPickerSearch />\n          <EmojiPickerContent>\n            <EmojiPickerLoading>\n              <Loader2 className=\"size-4 animate-spin\" />\n            </EmojiPickerLoading>\n            <EmojiPickerEmpty>No results</EmojiPickerEmpty>\n            <EmojiPickerList />\n          </EmojiPickerContent>\n        </EmojiPicker>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react",
      "lucide-react",
      "sonner"
    ],
    "path": ""
  },
  {
    "id": "form-demo",
    "name": "Form Demo",
    "description": "Form Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "form-demo.tsx",
        "path": "form-demo.tsx",
        "content": "import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Button,\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  Input,\n} from \"@nui/core\";\n\nconst schema = z.object({\n  displayName: z\n    .string()\n    .min(3, { message: \"Please enter at least 3 characters.\" }),\n  email: z.string().email({ message: \"Please enter a valid email address.\" }),\n});\n\ntype FormValues = z.infer<typeof schema>;\n\nexport default function FormDemo() {\n  const form = useForm<FormValues>({\n    resolver: zodResolver(schema),\n    defaultValues: {\n      displayName: \"\",\n      email: \"\",\n    },\n  });\n\n  const onSubmit = (data: FormValues) => {\n    console.log(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form\n        onSubmit={form.handleSubmit(onSubmit)}\n        className=\"flex w-96 flex-col gap-4\"\n      >\n        <FormField\n          name=\"displayName\"\n          control={form.control}\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Display Name</FormLabel>\n              <FormControl>\n                <Input\n                  className=\"w-full\"\n                  placeholder=\"borabalogluu\"\n                  aria-invalid={!!form.formState.errors.displayName}\n                  {...field}\n                />\n              </FormControl>\n              <FormDescription>\n                This is the name that will be displayed to other users.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          name=\"email\"\n          control={form.control}\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input\n                  className=\"w-full\"\n                  placeholder=\"your@email.com\"\n                  aria-invalid={!!form.formState.errors.email}\n                  {...field}\n                />\n              </FormControl>\n              <FormDescription>Enter your email address</FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react-hook-form",
      "@hookform/resolvers/zod",
      "zod"
    ],
    "path": ""
  },
  {
    "id": "input-demo",
    "name": "Input Demo",
    "description": "Input Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "input-demo.tsx",
        "path": "input-demo.tsx",
        "content": "import { Input } from \"@nui/core\";\n\nexport default function InputDemo() {\n  return <Input placeholder=\"Name\" inputContainerClassName=\"w-80\" />;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "input-disabled",
    "name": "Input Disabled",
    "description": "Input Disabled component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.244Z",
    "files": [
      {
        "name": "input-disabled.tsx",
        "path": "input-disabled.tsx",
        "content": "import { Input } from \"@nui/core\";\n\nexport default function InputDisabled() {\n  return <Input inputContainerClassName=\"w-80\" placeholder=\"Name\" disabled />;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "input-error",
    "name": "Input Error",
    "description": "Input Error component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "input-error.tsx",
        "path": "input-error.tsx",
        "content": "import { Input } from \"@nui/core\";\n\nexport default function InputError() {\n  return (\n    <Input inputContainerClassName=\"w-80\" placeholder=\"Name\" aria-invalid />\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "input-otp-demo",
    "name": "Input Otp Demo",
    "description": "Input Otp Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "input-otp-demo.tsx",
        "path": "input-otp-demo.tsx",
        "content": "import {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@nui/core\";\n\nexport default function InputOTPDemo() {\n  return (\n    <InputOTP maxLength={6}>\n      <InputOTPGroup>\n        <InputOTPSlot index={0} />\n        <InputOTPSlot index={1} />\n        <InputOTPSlot index={2} />\n      </InputOTPGroup>\n      <InputOTPSeparator />\n      <InputOTPGroup>\n        <InputOTPSlot index={3} />\n        <InputOTPSlot index={4} />\n        <InputOTPSlot index={5} />\n      </InputOTPGroup>\n    </InputOTP>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "input-with-icons",
    "name": "Input With Icons",
    "description": "Input With Icons component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "input-with-icons.tsx",
        "path": "input-with-icons.tsx",
        "content": "import { useState } from \"react\";\nimport { EyeIcon, EyeOffIcon, LockIcon } from \"lucide-react\";\nimport { Input } from \"@nui/core\";\n\nexport default function InputWithIcons() {\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n\n  const togglePasswordVisibility = () => {\n    setIsPasswordVisible(!isPasswordVisible);\n  };\n\n  const passwordType = isPasswordVisible ? \"text\" : \"password\";\n\n  return (\n    <Input\n      placeholder=\"Password\"\n      inputContainerClassName=\"w-80\"\n      type={passwordType}\n      leadingIcon={<LockIcon />}\n      trailingIcon={\n        isPasswordVisible ? (\n          <EyeIcon\n            className=\"hover:text-foreground pointer-events-auto cursor-pointer transition-colors duration-200\"\n            onClick={togglePasswordVisibility}\n          />\n        ) : (\n          <EyeOffIcon\n            className=\"hover:text-foreground pointer-events-auto cursor-pointer transition-colors duration-200\"\n            onClick={togglePasswordVisibility}\n          />\n        )\n      }\n    />\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react",
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "kbd-demo",
    "name": "Kbd Demo",
    "description": "Kbd Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "kbd-demo.tsx",
        "path": "kbd-demo.tsx",
        "content": "import { Kbd } from \"@nui/core\";\n\nexport default function KbdDemo() {\n  return (\n    <div className=\"flex items-center gap-2 text-sm\">\n      <Kbd>⌘</Kbd>+<Kbd>K</Kbd>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "label-demo",
    "name": "Label Demo",
    "description": "Label Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "label-demo.tsx",
        "path": "label-demo.tsx",
        "content": "import { Label } from \"@nui/core\";\n\nexport default function LabelDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"email\">Email</Label>\n        <input\n          id=\"email\"\n          type=\"email\"\n          placeholder=\"Enter your email\"\n          className=\"w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-ring\"\n        />\n      </div>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "label-variants",
    "name": "Label Variants",
    "description": "Label Variants component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "label-variants.tsx",
        "path": "label-variants.tsx",
        "content": "import { Label } from \"@nui/core\";\n\nexport default function LabelVariants() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"default\">Default Label</Label>\n        <input\n          id=\"default\"\n          type=\"text\"\n          placeholder=\"Default input\"\n          className=\"w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-ring\"\n        />\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label\n          htmlFor=\"required\"\n          className=\"after:content-['*'] after:ml-0.5 after:text-destructive\"\n        >\n          Required Field\n        </Label>\n        <input\n          id=\"required\"\n          type=\"text\"\n          placeholder=\"Required input\"\n          className=\"w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-ring\"\n          required\n        />\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"disabled\" className=\"text-muted-foreground\">\n          Disabled Field\n        </Label>\n        <input\n          id=\"disabled\"\n          type=\"text\"\n          placeholder=\"Disabled input\"\n          className=\"w-full px-3 py-2 border border-border rounded-md bg-muted text-muted-foreground cursor-not-allowed\"\n          disabled\n        />\n      </div>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "menubar-demo",
    "name": "Menubar Demo",
    "description": "Menubar Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "menubar-demo.tsx",
        "path": "menubar-demo.tsx",
        "content": "import {\n  Menubar,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSeparator,\n  MenubarShortcut,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarTrigger,\n} from \"@nui/core\";\n\nexport default function MenubarDemo() {\n  return (\n    <Menubar>\n      <MenubarMenu>\n        <MenubarTrigger>File</MenubarTrigger>\n        <MenubarContent>\n          <MenubarItem>\n            New File\n            <MenubarShortcut>⌘N</MenubarShortcut>\n          </MenubarItem>\n          <MenubarItem>\n            New Window\n            <MenubarShortcut>⇧⌘N</MenubarShortcut>\n          </MenubarItem>\n          <MenubarSeparator />\n          <MenubarItem>\n            Open\n            <MenubarShortcut>⌘O</MenubarShortcut>\n          </MenubarItem>\n          <MenubarItem>\n            Open Folder\n            <MenubarShortcut>⇧⌘O</MenubarShortcut>\n          </MenubarItem>\n          <MenubarItem>Open Recent</MenubarItem>\n          <MenubarSeparator />\n          <MenubarItem>\n            Save\n            <MenubarShortcut>⌘S</MenubarShortcut>\n          </MenubarItem>\n          <MenubarItem>\n            Save As\n            <MenubarShortcut>⇧⌘S</MenubarShortcut>\n          </MenubarItem>\n          <MenubarSeparator />\n          <MenubarItem>\n            Close Window\n            <MenubarShortcut>⌘W</MenubarShortcut>\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarMenu>\n      <MenubarMenu>\n        <MenubarTrigger>Edit</MenubarTrigger>\n        <MenubarContent>\n          <MenubarItem>\n            Undo\n            <MenubarShortcut>⌘Z</MenubarShortcut>\n          </MenubarItem>\n          <MenubarItem>\n            Redo\n            <MenubarShortcut>⌘Y</MenubarShortcut>\n          </MenubarItem>\n          <MenubarSeparator />\n          <MenubarItem>\n            Cut\n            <MenubarShortcut>⌘X</MenubarShortcut>\n          </MenubarItem>\n          <MenubarItem>\n            Copy\n            <MenubarShortcut>⌘C</MenubarShortcut>\n          </MenubarItem>\n          <MenubarItem>\n            Paste\n            <MenubarShortcut>⌘V</MenubarShortcut>\n          </MenubarItem>\n          <MenubarSeparator />\n          <MenubarItem>\n            Find\n            <MenubarShortcut>⌘F</MenubarShortcut>\n          </MenubarItem>\n          <MenubarItem>\n            Replace\n            <MenubarShortcut>⌥⌘F</MenubarShortcut>\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarMenu>\n      <MenubarMenu>\n        <MenubarTrigger>View</MenubarTrigger>\n        <MenubarContent>\n          <MenubarSub>\n            <MenubarSubTrigger>Appearance</MenubarSubTrigger>\n            <MenubarSubContent>\n              <MenubarRadioGroup\n                onValueChange={(value) => {\n                  console.log(value);\n                }}\n              >\n                <MenubarRadioItem value=\"system\">System</MenubarRadioItem>\n                <MenubarRadioItem value=\"light\">Light</MenubarRadioItem>\n                <MenubarRadioItem value=\"dark\">Dark</MenubarRadioItem>\n              </MenubarRadioGroup>\n            </MenubarSubContent>\n          </MenubarSub>\n          <MenubarSeparator />\n          <MenubarItem>\n            Show/Hide Sidebar\n            <MenubarShortcut>⌃⌥⌘*</MenubarShortcut>\n          </MenubarItem>\n          <MenubarItem>\n            Command Palette\n            <MenubarShortcut>⇧⌘P</MenubarShortcut>\n          </MenubarItem>\n          <MenubarItem>Expand Tabs</MenubarItem>\n          <MenubarSeparator />\n          <MenubarItem>\n            Zoom In\n            <MenubarShortcut>⌘+</MenubarShortcut>\n          </MenubarItem>\n          <MenubarItem>\n            Zoom Out\n            <MenubarShortcut>⌘-</MenubarShortcut>\n          </MenubarItem>\n          <MenubarItem>\n            Reset Zoom\n            <MenubarShortcut>⌘0</MenubarShortcut>\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarMenu>\n      <MenubarMenu>\n        <MenubarTrigger>Help</MenubarTrigger>\n        <MenubarContent>\n          <MenubarItem>Getting Started</MenubarItem>\n          <MenubarItem>Report Issue</MenubarItem>\n          <MenubarItem>Check for Updates</MenubarItem>\n          <MenubarItem>Contact the Team</MenubarItem>\n        </MenubarContent>\n      </MenubarMenu>\n    </Menubar>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "meter-demo",
    "name": "Meter Demo",
    "description": "Meter Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "meter-demo.tsx",
        "path": "meter-demo.tsx",
        "content": "import { Meter, MeterLabel, MeterValue } from \"@nui/core\";\n\nexport default function MeterDemo() {\n  return (\n    <Meter className=\"mx-auto w-48\" value={4} max={5}>\n      <div className=\"flex items-center justify-between\">\n        <MeterLabel>Tasks Completed</MeterLabel>\n        <MeterValue>{(formattedValue, value) => `${value} / 5`}</MeterValue>\n      </div>\n    </Meter>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "navigation-menu-demo",
    "name": "Navigation Menu Demo",
    "description": "Navigation Menu Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "navigation-menu-demo.tsx",
        "path": "navigation-menu-demo.tsx",
        "content": "import type * as React from \"react\";\nimport {\n  cn,\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n  navigationMenuTriggerStyle,\n} from \"@nui/core\";\n\nconst components: { title: string; href: string; description: string }[] = [\n  {\n    title: \"Alert Dialog\",\n    href: \"/docs/components/alert-dialog\",\n    description:\n      \"A modal dialog for critical messages or confirmation actions.\",\n  },\n  {\n    title: \"Preview Card\",\n    href: \"/docs/components/preview-card\",\n    description: \"Used to display a preview of content when hovered.\",\n  },\n  {\n    title: \"Emoji Picker\",\n    href: \"/docs/components/emoji-picker\",\n    description: \"A component that allows users to pick an emoji.\",\n  },\n  {\n    title: \"Progress\",\n    href: \"/docs/components/progress\",\n    description: \"Displays a progress bar with an optional label.\",\n  },\n  {\n    title: \"Tabs\",\n    href: \"/docs/components/tabs\",\n    description: \"Used to organize content into tabbed navigation.\",\n  },\n  {\n    title: \"Tooltip\",\n    href: \"/docs/components/tooltip\",\n    description: \"Used to provide context or hints for elements.\",\n  },\n];\n\nconst gettingStartedItems = [\n  {\n    title: \"Introduction\",\n    href: \"/docs/getting-started/introduction\",\n    description: \"Learn about 9ui.\",\n  },\n  {\n    title: \"Installation\",\n    href: \"/docs/getting-started/installation\",\n    description: \"How to install 9ui in your project.\",\n  },\n  {\n    title: \"Roadmap\",\n    href: \"/docs/getting-started/roadmap\",\n    description: \"See what we are working on next.\",\n  },\n];\n\nexport default function NavigationMenuDemo() {\n  return (\n    <NavigationMenu className=\"w-full\">\n      <NavigationMenuList className=\"flex-col items-start md:flex-row md:items-center\">\n        <NavigationMenuItem>\n          <NavigationMenuTrigger>Getting Started</NavigationMenuTrigger>\n          <NavigationMenuContent>\n            <ul className=\"grid w-[400px] gap-1 md:w-[500px] md:grid-cols-2\">\n              {gettingStartedItems.map((item) => (\n                <ListItem key={item.title} title={item.title} href={item.href}>\n                  {item.description}\n                </ListItem>\n              ))}\n            </ul>\n          </NavigationMenuContent>\n        </NavigationMenuItem>\n        <NavigationMenuItem>\n          <NavigationMenuTrigger>Components</NavigationMenuTrigger>\n          <NavigationMenuContent>\n            <ul className=\"grid w-[400px] gap-1 md:w-[500px] md:grid-cols-2\">\n              {components.map((component) => (\n                <ListItem\n                  key={component.title}\n                  title={component.title}\n                  href={component.href}\n                >\n                  {component.description}\n                </ListItem>\n              ))}\n            </ul>\n          </NavigationMenuContent>\n        </NavigationMenuItem>\n        <NavigationMenuItem>\n          <NavigationMenuLink\n            href=\"https://github.com/borabaloglu/9ui\"\n            render={({ ...props }) => (\n              <a {...props} className={cn(navigationMenuTriggerStyle())}>\n                {/* <Icons.gitHub /> */}\n                Source Code\n              </a>\n            )}\n          />\n        </NavigationMenuItem>\n      </NavigationMenuList>\n    </NavigationMenu>\n  );\n}\n\nfunction ListItem({\n  title,\n  children,\n  href,\n  ...props\n}: React.ComponentPropsWithoutRef<\"li\"> & { href: string }) {\n  return (\n    <li {...props}>\n      <NavigationMenuLink\n        render={(props) => (\n          <a href={href} {...props}>\n            <div className=\"text-sm font-semibold\">{title}</div>\n            <p className=\"text-muted-foreground line-clamp-2 text-sm\">\n              {children}\n            </p>\n          </a>\n        )}\n      />\n    </li>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react"
    ],
    "path": ""
  },
  {
    "id": "number-field-demo",
    "name": "Number Field Demo",
    "description": "Number Field Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "number-field-demo.tsx",
        "path": "number-field-demo.tsx",
        "content": "import { NumberField, NumberFieldScrubArea } from \"@nui/core\";\n\nexport default function NumberFieldDemo() {\n  return (\n    <NumberField className=\"mx-auto\" defaultValue={5} min={0} max={100}>\n      <NumberFieldScrubArea />\n    </NumberField>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "pagination-demo",
    "name": "Pagination Demo",
    "description": "Pagination Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "pagination-demo.tsx",
        "path": "pagination-demo.tsx",
        "content": "import {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@nui/core\";\n\nexport default function PaginationDemo() {\n  return (\n    <Pagination>\n      <PaginationContent>\n        <PaginationItem>\n          <PaginationPrevious href=\"#\" />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLink href=\"#\">1</PaginationLink>\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLink href=\"#\" isActive>\n            2\n          </PaginationLink>\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLink href=\"#\">3</PaginationLink>\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationEllipsis />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationNext href=\"#\" />\n        </PaginationItem>\n      </PaginationContent>\n    </Pagination>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "popover-demo",
    "name": "Popover Demo",
    "description": "Popover Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "popover-demo.tsx",
        "path": "popover-demo.tsx",
        "content": "import { CopyIcon, Share2Icon } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport {\n  Button,\n  Input,\n  Popover,\n  PopoverContent,\n  PopoverDescription,\n  PopoverHeader,\n  PopoverTitle,\n  PopoverTrigger,\n} from \"@nui/core\";\n\nexport default function PopoverDemo() {\n  const copyToClipboard = () => {\n    toast.success(\"Copied to clipboard\");\n    navigator.clipboard.writeText(window.location.href);\n  };\n\n  return (\n    <Popover>\n      <PopoverTrigger\n        render={(props) => (\n          <Button {...props} variant=\"outline\" size=\"icon\">\n            <Share2Icon />\n          </Button>\n        )}\n      />\n      <PopoverContent className=\"w-[calc(100vw-4rem)] sm:w-[500px]\">\n        <PopoverHeader>\n          <PopoverTitle>Share</PopoverTitle>\n          <PopoverDescription>Share this component.</PopoverDescription>\n        </PopoverHeader>\n        <div className=\"mt-2 flex w-full gap-2\">\n          <Input\n            inputContainerClassName=\"w-full\"\n            value={window.location.href}\n            readOnly\n          />\n          <Button className=\"shrink-0\" size=\"icon\" onClick={copyToClipboard}>\n            <CopyIcon />\n          </Button>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "sonner"
    ],
    "path": ""
  },
  {
    "id": "preview-card-demo",
    "name": "Preview Card Demo",
    "description": "Preview Card Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "preview-card-demo.tsx",
        "path": "preview-card-demo.tsx",
        "content": "import { PreviewCard, PreviewCardContent, PreviewCardTrigger } from \"@nui/core\";\n\nexport default function PreviewCardDemo() {\n  return (\n    <PreviewCard>\n      <p>\n        This is a preview card component from{\" \"}\n        <PreviewCardTrigger className=\"cursor-pointer underline underline-offset-2\">\n          9ui\n        </PreviewCardTrigger>\n        .\n      </p>\n      <PreviewCardContent>\n        {/* <Icons.logo className=\"mx-auto w-10\" /> */}\n        <p className=\"mt-4 text-sm\">\n          Beautiful, customizable components built with{\" \"}\n          <a\n            href=\"https://base-ui.com\"\n            className=\"underline underline-offset-2\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            Base UI\n          </a>{\" \"}\n          and{\" \"}\n          <a\n            href=\"https://tailwindcss.com\"\n            className=\"underline underline-offset-2\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            Tailwind CSS\n          </a>\n          .\n        </p>\n        <div className=\"mt-4 flex flex-col gap-1 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-muted-foreground\">Creator:</span>\n            <a\n              href=\"https://x.com/borabalogluu\"\n              className=\"underline underline-offset-2\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              Bora Baloglu\n            </a>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-muted-foreground\">Source code:</span>\n            <a\n              href=\"https://github.com/borabaloglu/9ui\"\n              className=\"underline underline-offset-2\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              Github\n            </a>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-muted-foreground\">Website</span>\n            <a\n              href=\"https://9ui.dev\"\n              className=\"underline underline-offset-2\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              9ui.dev\n            </a>\n          </div>\n        </div>\n      </PreviewCardContent>\n    </PreviewCard>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "progress-demo",
    "name": "Progress Demo",
    "description": "Progress Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "progress-demo.tsx",
        "path": "progress-demo.tsx",
        "content": "import { useEffect, useState } from \"react\";\nimport { Progress } from \"@nui/core\";\n\nexport default function ProgressDemo() {\n  const [value, setValue] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setValue((prev) => (prev === 100 ? 100 : prev + 2));\n    }, 100);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"w-80\">\n      <Progress value={value} />\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "progress-with-value",
    "name": "Progress With Value",
    "description": "Progress With Value component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "progress-with-value.tsx",
        "path": "progress-with-value.tsx",
        "content": "import { useEffect, useState } from \"react\";\nimport { Progress, ProgressValue } from \"@nui/core\";\n\nexport default function ProgressWithValueDemo() {\n  const [value, setValue] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setValue((prev) => (prev === 100 ? 100 : prev + 2));\n    }, 100);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"w-80\">\n      <Progress value={value}>\n        <ProgressValue />\n      </Progress>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "radio-group-demo",
    "name": "Radio Group Demo",
    "description": "Radio Group Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "radio-group-demo.tsx",
        "path": "radio-group-demo.tsx",
        "content": "import { Label, RadioGroup, RadioGroupItem } from \"@nui/core\";\n\nexport default function RadioGroupDemo() {\n  return (\n    <RadioGroup aria-labelledby=\"radio-group-plan\">\n      <div id=\"radio-group-plan\" className=\"font-medium text-foreground\">\n        Select a plan\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem id=\"basic\" value=\"basic\" />\n        <Label htmlFor=\"basic\">Basic</Label>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem id=\"standard\" value=\"standard\" />\n        <Label htmlFor=\"standard\">Standard</Label>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem id=\"premium\" value=\"premium\" />\n        <Label htmlFor=\"premium\">Premium</Label>\n      </div>\n    </RadioGroup>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "radio-group-disabled",
    "name": "Radio Group Disabled",
    "description": "Radio Group Disabled component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "radio-group-disabled.tsx",
        "path": "radio-group-disabled.tsx",
        "content": "import { Label, RadioGroup, RadioGroupItem } from \"@nui/core\";\n\nexport default function RadioGroupDisabled() {\n  return (\n    <RadioGroup disabled aria-labelledby=\"radio-group-notifications\">\n      <div\n        id=\"radio-group-notifications\"\n        className=\"font-medium text-foreground\"\n      >\n        Notifications\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem id=\"email\" value=\"email\" />\n        <Label htmlFor=\"email\">Email</Label>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem id=\"sms\" value=\"sms\" />\n        <Label htmlFor=\"sms\">SMS</Label>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <RadioGroupItem id=\"email-and-sms\" value=\"email-and-sms\" />\n        <Label htmlFor=\"email-and-sms\">Email & SMS</Label>\n      </div>\n    </RadioGroup>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "scroll-area-demo",
    "name": "Scroll Area Demo",
    "description": "Scroll Area Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "scroll-area-demo.tsx",
        "path": "scroll-area-demo.tsx",
        "content": "import { ScrollArea, Separator } from \"@nui/core\";\n\nconst versions = Array.from({ length: 50 }, (_, i) => `v${i + 1}.0.0`);\n\nexport default function ScrollAreaDemo() {\n  return (\n    <ScrollArea className=\"h-60 w-full max-w-60 rounded-md border\">\n      <div className=\"p-4\">\n        <h4 className=\"text-sm font-medium\">Versions</h4>\n        <Separator className=\"my-2\" />\n        <div className=\"mt-2 flex flex-col gap-2 text-sm\">\n          {versions.map((version) => (\n            <div key={version}>{version}</div>\n          ))}\n        </div>\n      </div>\n    </ScrollArea>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "scroll-area-horizontal",
    "name": "Scroll Area Horizontal",
    "description": "Scroll Area Horizontal component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "scroll-area-horizontal.tsx",
        "path": "scroll-area-horizontal.tsx",
        "content": "import { ScrollArea } from \"@nui/core\";\n\nconst versions = Array.from({ length: 50 }, (_, i) => `v${i + 1}.0.0`).join(\n  \", \",\n);\n\nexport default function ScrollAreaHorizontal() {\n  return (\n    <ScrollArea className=\"w-full rounded-md border\" orientation=\"horizontal\">\n      <div className=\"inline-block p-4 text-sm text-nowrap\">{versions}</div>\n    </ScrollArea>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "select-demo",
    "name": "Select Demo",
    "description": "Select Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "select-demo.tsx",
        "path": "select-demo.tsx",
        "content": "import {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@nui/core\";\n\nconst items = [\n  {\n    label: \"Select a fruit\",\n    value: null,\n  },\n  {\n    label: \"Apple\",\n    value: \"apple\",\n  },\n  {\n    label: \"Banana\",\n    value: \"banana\",\n  },\n  {\n    label: \"Cherry\",\n    value: \"cherry\",\n  },\n];\n\nexport default function SelectDemo() {\n  return (\n    <div className=\"w-80\">\n      <Select items={items}>\n        <SelectTrigger className=\"w-full\">\n          <SelectValue />\n        </SelectTrigger>\n        <SelectContent>\n          {items.map((item) => (\n            <SelectItem key={item.value} value={item.value}>\n              {item.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "select-with-custom-value",
    "name": "Select With Custom Value",
    "description": "Select With Custom Value component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "select-with-custom-value.tsx",
        "path": "select-with-custom-value.tsx",
        "content": "import { useState } from \"react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@nui/core\";\n\nconst users = {\n  \"karen-smith\": {\n    name: \"Karen Smith\",\n    image: \"/memoji-1.png\",\n  },\n  \"chris-williams\": {\n    name: \"Chris Williams\",\n    image: \"/memoji-3.png\",\n  },\n  \"melissa-johnson\": {\n    name: \"Melissa Johnson\",\n    image: \"/memoji-2.png\",\n  },\n  \"frank-lee\": {\n    name: \"Frank Lee\",\n    image: \"/memoji-4.png\",\n  },\n};\n\nexport default function SelectWithCustomValue() {\n  const [selected, setSelected] = useState<keyof typeof users | null>(null);\n\n  return (\n    <div className=\"w-80\">\n      <Select\n        value={selected}\n        onValueChange={(value) => setSelected(value as keyof typeof users)}\n      >\n        <SelectTrigger className=\"w-full\">\n          <SelectValue>\n            {() =>\n              selected ? (\n                <div className=\"flex items-center gap-2\">\n                  <img\n                    src={users[selected].image}\n                    alt={users[selected].name}\n                    width={16}\n                    height={16}\n                  />\n                  {users[selected].name}\n                </div>\n              ) : (\n                \"Assign to\"\n              )\n            }\n          </SelectValue>\n        </SelectTrigger>\n        <SelectContent>\n          {Object.entries(users).map(([id, user]) => (\n            <SelectItem key={id} value={id}>\n              <div className=\"flex items-center gap-2\">\n                <img src={user.image} alt={user.name} width={16} height={16} />\n                {user.name}\n              </div>\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react"
    ],
    "path": ""
  },
  {
    "id": "select-with-groups",
    "name": "Select With Groups",
    "description": "Select With Groups component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "select-with-groups.tsx",
        "path": "select-with-groups.tsx",
        "content": "import {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectTrigger,\n  SelectValue,\n} from \"@nui/core\";\n\nconst items = [\n  {\n    label: \"Select an option\",\n    value: null,\n  },\n  {\n    label: \"Apple\",\n    value: \"apple\",\n  },\n  {\n    label: \"Banana\",\n    value: \"banana\",\n  },\n  {\n    label: \"Cherry\",\n    value: \"cherry\",\n  },\n  {\n    label: \"Carrot\",\n    value: \"carrot\",\n  },\n  {\n    label: \"Potato\",\n    value: \"potato\",\n  },\n  {\n    label: \"Tomato\",\n    value: \"tomato\",\n  },\n];\n\nexport default function SelectWithGroups() {\n  return (\n    <div className=\"w-80\">\n      <Select items={items}>\n        <SelectTrigger className=\"w-full\">\n          <SelectValue />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectGroup>\n            <SelectLabel>Fruits</SelectLabel>\n            <SelectItem value=\"apple\">Apple</SelectItem>\n            <SelectItem value=\"banana\">Banana</SelectItem>\n            <SelectItem value=\"cherry\">Cherry</SelectItem>\n          </SelectGroup>\n          <SelectGroup>\n            <SelectLabel>Vegetables</SelectLabel>\n            <SelectItem value=\"carrot\">Carrot</SelectItem>\n            <SelectItem value=\"potato\">Potato</SelectItem>\n            <SelectItem value=\"tomato\">Tomato</SelectItem>\n          </SelectGroup>\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "separator-demo",
    "name": "Separator Demo",
    "description": "Separator Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "separator-demo.tsx",
        "path": "separator-demo.tsx",
        "content": "import { Separator } from \"@nui/core\";\n\nexport default function SeparatorDemo() {\n  return (\n    <div>\n      <p>9ui is a component library for building modern web applications.</p>\n      <Separator className=\"my-2.5\" />\n      <div className=\"flex gap-2.5\">\n        <p>Website</p>\n        <Separator orientation=\"vertical\" />\n        <p>Documentation</p>\n        <Separator orientation=\"vertical\" />\n        <p>Community</p>\n      </div>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "sheet-demo",
    "name": "Sheet Demo",
    "description": "Sheet Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "sheet-demo.tsx",
        "path": "sheet-demo.tsx",
        "content": "import {\n  Button,\n  Label,\n  Sheet,\n  SheetClose,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n  Textarea,\n} from \"@nui/core\";\n\nexport default function SheetDemo() {\n  return (\n    <Sheet>\n      <SheetTrigger\n        render={(props) => <Button {...props}>Open Sheet</Button>}\n      />\n      <SheetContent>\n        <SheetClose />\n        <SheetHeader>\n          <SheetTitle>Submit Feedback</SheetTitle>\n          <SheetDescription>\n            Please share your feedback with us to help improve our service.\n          </SheetDescription>\n        </SheetHeader>\n        <div className=\"space-y-2 px-4\">\n          <Label htmlFor=\"feedback\">Your Feedback</Label>\n          <Textarea id=\"feedback\" placeholder=\"Type your feedback here.\" />\n        </div>\n        <SheetFooter>\n          <Button size=\"sm\">Submit</Button>\n          <SheetClose\n            render={(props) => (\n              <Button {...props} size=\"sm\" variant=\"ghost\">\n                Close\n              </Button>\n            )}\n          />\n        </SheetFooter>\n      </SheetContent>\n    </Sheet>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "sheet-sides",
    "name": "Sheet Sides",
    "description": "Sheet Sides component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "sheet-sides.tsx",
        "path": "sheet-sides.tsx",
        "content": "import {\n  Button,\n  Label,\n  Sheet,\n  SheetClose,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n  Textarea,\n} from \"@nui/core\";\n\nconst SHEET_SIDES = [\"top\", \"right\", \"bottom\", \"left\"] as const;\n\nexport default function SheetSides() {\n  return (\n    <div className=\"grid grid-cols-2 gap-2\">\n      {SHEET_SIDES.map((side) => (\n        <Sheet key={side}>\n          <SheetTrigger\n            render={(props) => (\n              <Button {...props} className=\"w-full\">\n                {side}\n              </Button>\n            )}\n          />\n          <SheetContent side={side}>\n            <SheetClose />\n            <SheetHeader>\n              <SheetTitle>Submit Feedback</SheetTitle>\n              <SheetDescription>\n                Please share your feedback with us to help improve our service.\n              </SheetDescription>\n            </SheetHeader>\n            <div className=\"space-y-2 px-4\">\n              <Label htmlFor=\"feedback\">Your Feedback</Label>\n              <Textarea id=\"feedback\" placeholder=\"Type your feedback here.\" />\n            </div>\n            <SheetFooter>\n              <Button size=\"sm\">Submit</Button>\n              <SheetClose\n                render={(props) => (\n                  <Button {...props} size=\"sm\" variant=\"ghost\">\n                    Close\n                  </Button>\n                )}\n              />\n            </SheetFooter>\n          </SheetContent>\n        </Sheet>\n      ))}\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "skeleton-demo",
    "name": "Skeleton Demo",
    "description": "Skeleton Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "skeleton-demo.tsx",
        "path": "skeleton-demo.tsx",
        "content": "import { Skeleton } from \"@nui/core\";\n\nexport default function SkeletonDemo() {\n  return (\n    <div className=\"flex w-64 flex-col gap-4 rounded-lg border p-4\">\n      <Skeleton className=\"aspect-video w-full\" />\n      <Skeleton className=\"h-5 w-2/3\" />\n      <div className=\"flex flex-col gap-2\">\n        <Skeleton className=\"h-4 w-full\" />\n        <Skeleton className=\"h-4 w-full\" />\n        <Skeleton className=\"h-4 w-2/3\" />\n      </div>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "slider-demo",
    "name": "Slider Demo",
    "description": "Slider Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "slider-demo.tsx",
        "path": "slider-demo.tsx",
        "content": "import { Slider } from \"@nui/core\";\n\nexport default function SliderDemo() {\n  return <Slider className=\"max-w-100\" defaultValue={50} />;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "slider-disabled",
    "name": "Slider Disabled",
    "description": "Slider Disabled component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "slider-disabled.tsx",
        "path": "slider-disabled.tsx",
        "content": "import { Slider } from \"@nui/core\";\n\nexport default function SliderDisabled() {\n  return <Slider className=\"max-w-100\" defaultValue={50} disabled />;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "slider-range",
    "name": "Slider Range",
    "description": "Slider Range component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "slider-range.tsx",
        "path": "slider-range.tsx",
        "content": "import { Slider } from \"@nui/core\";\n\nexport default function SliderRange() {\n  return <Slider className=\"max-w-100\" defaultValue={[20, 80]} />;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "slider-with-value",
    "name": "Slider With Value",
    "description": "Slider With Value component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "slider-with-value.tsx",
        "path": "slider-with-value.tsx",
        "content": "import { Slider, SliderValue } from \"@nui/core\";\n\nexport default function SliderWithValue() {\n  return (\n    <Slider className=\"max-w-100\" defaultValue={50}>\n      <div className=\"flex justify-between\">\n        <span className=\"text-muted-foreground mt-3 text-xs font-medium\">\n          Opacity\n        </span>\n        <SliderValue />\n      </div>\n    </Slider>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "sonner-action",
    "name": "Sonner Action",
    "description": "Sonner Action component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "sonner-action.tsx",
        "path": "sonner-action.tsx",
        "content": "import { toast } from \"sonner\";\nimport { Button } from \"@nui/core\";\n\nexport default function SonnerActionDemo() {\n  return (\n    <Button\n      onClick={() =>\n        toast(\"Your email has been sent\", {\n          description: \"We'll get back to you as soon as possible\",\n          action: {\n            label: \"Unsend\",\n            onClick: () => toast.success(\"Email unsent\"),\n          },\n        })\n      }\n    >\n      Show Toast\n    </Button>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "sonner",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "sonner-demo",
    "name": "Sonner Demo",
    "description": "Sonner Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "sonner-demo.tsx",
        "path": "sonner-demo.tsx",
        "content": "import { toast } from \"sonner\";\nimport { Button } from \"@nui/core\";\n\nexport default function SonnerDemo() {\n  return (\n    <Button\n      onClick={() =>\n        toast(\"Your request has been sent\", {\n          description: \"We'll get back to you as soon as possible\",\n        })\n      }\n    >\n      Show Toast\n    </Button>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "sonner",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "sonner-promise",
    "name": "Sonner Promise",
    "description": "Sonner Promise component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "sonner-promise.tsx",
        "path": "sonner-promise.tsx",
        "content": "import { toast } from \"sonner\";\nimport { Button } from \"@nui/core\";\n\nexport default function SonnerPromiseDemo() {\n  return (\n    <Button\n      onClick={() =>\n        toast.promise(\n          new Promise((resolve) => {\n            setTimeout(() => {\n              resolve(\"Request sent\");\n            }, 2000);\n          }),\n          {\n            loading: \"Sending request...\",\n            success: \"Request sent\",\n          },\n        )\n      }\n    >\n      Show Toast\n    </Button>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "sonner",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "sonner-rich-colors",
    "name": "Sonner Rich Colors",
    "description": "Sonner Rich Colors component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "sonner-rich-colors.tsx",
        "path": "sonner-rich-colors.tsx",
        "content": "import { toast } from \"sonner\";\nimport { Button } from \"@nui/core\";\n\nexport default function SonnerRichColorsDemo() {\n  return (\n    <div className=\"grid grid-cols-2 gap-2\">\n      <Button onClick={() => toast.success(\"Success\", { richColors: true })}>\n        success\n      </Button>\n      <Button onClick={() => toast.error(\"Error\", { richColors: true })}>\n        error\n      </Button>\n      <Button onClick={() => toast.warning(\"Warning\", { richColors: true })}>\n        warning\n      </Button>\n      <Button onClick={() => toast.info(\"Info\", { richColors: true })}>\n        info\n      </Button>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "sonner",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "switch-demo",
    "name": "Switch Demo",
    "description": "Switch Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "switch-demo.tsx",
        "path": "switch-demo.tsx",
        "content": "import { Switch } from \"@nui/core\";\n\nexport default function SwitchDemo() {\n  return <Switch />;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "switch-disabled",
    "name": "Switch Disabled",
    "description": "Switch Disabled component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "switch-disabled.tsx",
        "path": "switch-disabled.tsx",
        "content": "import { Switch } from \"@nui/core\";\n\nexport default function SwitchDisabled() {\n  return <Switch disabled />;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "switch-with-label",
    "name": "Switch With Label",
    "description": "Switch With Label component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "switch-with-label.tsx",
        "path": "switch-with-label.tsx",
        "content": "import { Label, Switch } from \"@nui/core\";\n\nexport default function SwitchWithLabel() {\n  return (\n    <div className=\"flex items-center gap-2\">\n      <Switch id=\"enable-notifications\" />\n      <Label htmlFor=\"enable-notifications\">Enable notifications</Label>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "table-demo",
    "name": "Table Demo",
    "description": "Table Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "table-demo.tsx",
        "path": "table-demo.tsx",
        "content": "import {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@nui/core\";\n\nconst movies = [\n  { title: \"The Shawshank Redemption\", year: 1994, rating: 9.3 },\n  { title: \"The Godfather\", year: 1972, rating: 9.2 },\n  { title: \"The Dark Knight\", year: 2008, rating: 9.0 },\n  { title: \"The Godfather Part II\", year: 1974, rating: 9.0 },\n  { title: \"12 Angry Men\", year: 1957, rating: 9.0 },\n  { title: \"Schindler's List\", year: 1993, rating: 9.0 },\n  {\n    title: \"The Lord of the Rings: The Return of the King\",\n    year: 2003,\n    rating: 9.0,\n  },\n  { title: \"Pulp Fiction\", year: 1994, rating: 8.9 },\n  {\n    title: \"The Lord of the Rings: The Fellowship of the Ring\",\n    year: 2001,\n    rating: 8.8,\n  },\n  { title: \"Forrest Gump\", year: 1994, rating: 8.8 },\n];\n\nexport default function TableDemo() {\n  return (\n    <div className=\"w-full overflow-hidden rounded-lg border pb-2\">\n      <Table>\n        <TableCaption>Top 10 Movies of All Time</TableCaption>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Title</TableHead>\n            <TableHead className=\"w-20\">Year</TableHead>\n            <TableHead className=\"w-20 text-right\">IMDB</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {movies.map((movie) => (\n            <TableRow key={movie.title}>\n              <TableCell className=\"py-4 font-medium sm:py-0\">\n                {movie.title}\n              </TableCell>\n              <TableCell>{movie.year}</TableCell>\n              <TableCell className=\"text-right\">{movie.rating}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "tabs-demo",
    "name": "Tabs Demo",
    "description": "Tabs Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "tabs-demo.tsx",
        "path": "tabs-demo.tsx",
        "content": "import {\n  Button,\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Input,\n  Label,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@nui/core\";\n\nexport default function TabsDemo() {\n  return (\n    <Tabs className=\"w-full max-w-96\" defaultValue=\"login\">\n      <TabsList>\n        <TabsTrigger value=\"login\">Login</TabsTrigger>\n        <TabsTrigger value=\"signup\">Sign up</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"login\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Login</CardTitle>\n            <CardDescription>Login to your account to continue</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex flex-col gap-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input id=\"email\" placeholder=\"Email\" type=\"email\" />\n            </div>\n            <div className=\"flex flex-col gap-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input id=\"password\" placeholder=\"Password\" type=\"password\" />\n            </div>\n          </CardContent>\n          <CardFooter>\n            <Button className=\"w-full\">Login</Button>\n          </CardFooter>\n        </Card>\n      </TabsContent>\n      <TabsContent value=\"signup\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Sign up</CardTitle>\n            <CardDescription>Sign up to create an account</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex flex-col gap-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input id=\"email\" placeholder=\"Email\" type=\"email\" />\n            </div>\n            <div className=\"flex flex-col gap-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input id=\"password\" placeholder=\"Password\" type=\"password\" />\n            </div>\n          </CardContent>\n          <CardFooter>\n            <Button className=\"w-full\">Sign up</Button>\n          </CardFooter>\n        </Card>\n      </TabsContent>\n    </Tabs>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "tabs-disabled",
    "name": "Tabs Disabled",
    "description": "Tabs Disabled component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "tabs-disabled.tsx",
        "path": "tabs-disabled.tsx",
        "content": "import {\n  Button,\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Input,\n  Label,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@nui/core\";\n\nexport default function TabsUnderline() {\n  return (\n    <Tabs className=\"w-full max-w-96\" defaultValue=\"login\">\n      <TabsList>\n        <TabsTrigger value=\"login\">Login</TabsTrigger>\n        <Tooltip>\n          <TooltipTrigger\n            className=\"w-full\"\n            render={(props) => (\n              <div {...props}>\n                <TabsTrigger disabled>Sign up</TabsTrigger>\n              </div>\n            )}\n          />\n          <TooltipContent className=\"w-64\">\n            <span>\n              Sign ups are temporarily disabled. Please check back later.\n            </span>\n          </TooltipContent>\n        </Tooltip>\n      </TabsList>\n      <TabsContent value=\"login\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Login</CardTitle>\n            <CardDescription>Login to your account to continue</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex flex-col gap-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input id=\"email\" placeholder=\"Email\" type=\"email\" />\n            </div>\n            <div className=\"flex flex-col gap-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input id=\"password\" placeholder=\"Password\" type=\"password\" />\n            </div>\n          </CardContent>\n          <CardFooter>\n            <Button className=\"w-full\">Login</Button>\n          </CardFooter>\n        </Card>\n      </TabsContent>\n    </Tabs>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "tabs-underline",
    "name": "Tabs Underline",
    "description": "Tabs Underline component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "tabs-underline.tsx",
        "path": "tabs-underline.tsx",
        "content": "import {\n  Button,\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Input,\n  Label,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@nui/core\";\n\nexport default function TabsUnderline() {\n  return (\n    <Tabs className=\"w-full max-w-96\" defaultValue=\"login\" variant=\"underline\">\n      <TabsList>\n        <TabsTrigger value=\"login\">Login</TabsTrigger>\n        <TabsTrigger value=\"signup\">Sign up</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"login\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Login</CardTitle>\n            <CardDescription>Login to your account to continue</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex flex-col gap-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input id=\"email\" placeholder=\"Email\" type=\"email\" />\n            </div>\n            <div className=\"flex flex-col gap-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input id=\"password\" placeholder=\"Password\" type=\"password\" />\n            </div>\n          </CardContent>\n          <CardFooter>\n            <Button className=\"w-full\">Login</Button>\n          </CardFooter>\n        </Card>\n      </TabsContent>\n      <TabsContent value=\"signup\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Sign up</CardTitle>\n            <CardDescription>Sign up to create an account</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex flex-col gap-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input id=\"email\" placeholder=\"Email\" type=\"email\" />\n            </div>\n            <div className=\"flex flex-col gap-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input id=\"password\" placeholder=\"Password\" type=\"password\" />\n            </div>\n          </CardContent>\n          <CardFooter>\n            <Button className=\"w-full\">Sign up</Button>\n          </CardFooter>\n        </Card>\n      </TabsContent>\n    </Tabs>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "textarea-demo",
    "name": "Textarea Demo",
    "description": "Textarea Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "textarea-demo.tsx",
        "path": "textarea-demo.tsx",
        "content": "import { Textarea } from \"@nui/core\";\n\nexport default function TextareaDemo() {\n  return <Textarea className=\"w-80\" placeholder=\"Enter your message...\" />;\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "textarea-disabled",
    "name": "Textarea Disabled",
    "description": "Textarea Disabled component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "textarea-disabled.tsx",
        "path": "textarea-disabled.tsx",
        "content": "import { Textarea } from \"@nui/core\";\n\nexport default function TextareaDisabled() {\n  return (\n    <Textarea className=\"w-80\" placeholder=\"Enter your message...\" disabled />\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "textarea-error",
    "name": "Textarea Error",
    "description": "Textarea Error component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "textarea-error.tsx",
        "path": "textarea-error.tsx",
        "content": "import { Textarea } from \"@nui/core\";\n\nexport default function TextareaError() {\n  return (\n    <Textarea\n      className=\"w-80\"\n      placeholder=\"Enter your message...\"\n      aria-invalid\n    />\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "toast-action",
    "name": "Toast Action",
    "description": "Toast Action component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "toast-action.tsx",
        "path": "toast-action.tsx",
        "content": "import { Button, useToast } from \"@nui/core\";\n\nexport default function ToastActionDemo() {\n  const toast = useToast();\n\n  return (\n    <Button\n      onClick={() => {\n        const id = toast.add({\n          title: \"Your email has been sent\",\n          description: \"We'll get back to you as soon as possible\",\n          actionProps: {\n            children: \"Unsend\",\n            onClick: () => {\n              toast.close(id);\n              toast.add({\n                title: \"Email unsent\",\n                type: \"success\",\n              });\n            },\n          },\n        });\n      }}\n    >\n      Show Toast\n    </Button>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "toast-demo",
    "name": "Toast Demo",
    "description": "Toast Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "toast-demo.tsx",
        "path": "toast-demo.tsx",
        "content": "import { Button, useToast } from \"@nui/core\";\n\nexport default function ToastDemo() {\n  const toast = useToast();\n\n  return (\n    <Button\n      onClick={() =>\n        toast.add({\n          title: \"Your request has been sent\",\n          description: \"We'll get back to you as soon as possible\",\n        })\n      }\n    >\n      Show Toast\n    </Button>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "toast-promise",
    "name": "Toast Promise",
    "description": "Toast Promise component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "toast-promise.tsx",
        "path": "toast-promise.tsx",
        "content": "import { Button, useToast } from \"@nui/core\";\n\nexport default function ToastPromiseDemo() {\n  const toast = useToast();\n\n  return (\n    <Button\n      onClick={() =>\n        toast.promise(\n          new Promise<string>((resolve) => {\n            setTimeout(() => {\n              resolve(\"Request sent\");\n            }, 2000);\n          }),\n          {\n            loading: \"Sending request...\",\n            success: (data: string) => `Success: ${data}`,\n            error: (err: Error) => `Error: ${err.message}`,\n          },\n        )\n      }\n    >\n      Show Toast\n    </Button>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "toast-rich-colors",
    "name": "Toast Rich Colors",
    "description": "Toast Rich Colors component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "toast-rich-colors.tsx",
        "path": "toast-rich-colors.tsx",
        "content": "import { Button, useToast } from \"@nui/core\";\n\nexport default function ToastRichColorsDemo() {\n  const toast = useToast();\n\n  return (\n    <div className=\"grid grid-cols-2 gap-2\">\n      <Button\n        onClick={() =>\n          toast.add({\n            title: \"Success\",\n            type: \"success\",\n          })\n        }\n      >\n        success\n      </Button>\n      <Button\n        onClick={() =>\n          toast.add({\n            title: \"Error\",\n            type: \"error\",\n          })\n        }\n      >\n        error\n      </Button>\n      <Button\n        onClick={() =>\n          toast.add({\n            title: \"Warning\",\n            type: \"warning\",\n          })\n        }\n      >\n        warning\n      </Button>\n      <Button\n        onClick={() =>\n          toast.add({\n            title: \"Info\",\n            type: \"info\",\n          })\n        }\n      >\n        info\n      </Button>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "toggle-custom-control",
    "name": "Toggle Custom Control",
    "description": "Toggle Custom Control component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "toggle-custom-control.tsx",
        "path": "toggle-custom-control.tsx",
        "content": "import { useState } from \"react\";\nimport { PinIcon, PinOffIcon } from \"lucide-react\";\nimport { Toggle } from \"@nui/core\";\n\nexport default function ToggleCustomControl() {\n  const [isPinned, setIsPinned] = useState(false);\n\n  return (\n    <Toggle aria-label=\"Pin\" pressed={isPinned} onPressedChange={setIsPinned}>\n      {isPinned ? <PinIcon /> : <PinOffIcon />}\n    </Toggle>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "react",
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "toggle-demo",
    "name": "Toggle Demo",
    "description": "Toggle Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "toggle-demo.tsx",
        "path": "toggle-demo.tsx",
        "content": "import { PinIcon } from \"lucide-react\";\nimport { Toggle } from \"@nui/core\";\n\nexport default function ToggleDemo() {\n  return (\n    <Toggle aria-label=\"Pin\">\n      <PinIcon />\n    </Toggle>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "toggle-disabled",
    "name": "Toggle Disabled",
    "description": "Toggle Disabled component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "toggle-disabled.tsx",
        "path": "toggle-disabled.tsx",
        "content": "import { PinIcon } from \"lucide-react\";\nimport { Toggle } from \"@nui/core\";\n\nexport default function ToggleDisabled() {\n  return (\n    <Toggle aria-label=\"Pin\" disabled>\n      <PinIcon />\n    </Toggle>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "toggle-group-demo",
    "name": "Toggle Group Demo",
    "description": "Toggle Group Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "toggle-group-demo.tsx",
        "path": "toggle-group-demo.tsx",
        "content": "import { AlignCenterIcon, AlignLeftIcon, AlignRightIcon } from \"lucide-react\";\nimport { Toggle, ToggleGroup } from \"@nui/core\";\n\nexport default function ToggleGroupDemo() {\n  return (\n    <ToggleGroup>\n      <Toggle value=\"left\">\n        <AlignLeftIcon />\n      </Toggle>\n      <Toggle value=\"center\">\n        <AlignCenterIcon />\n      </Toggle>\n      <Toggle value=\"right\">\n        <AlignRightIcon />\n      </Toggle>\n    </ToggleGroup>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "toggle-group-multiple",
    "name": "Toggle Group Multiple",
    "description": "Toggle Group Multiple component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "toggle-group-multiple.tsx",
        "path": "toggle-group-multiple.tsx",
        "content": "import { BoldIcon, ItalicIcon, UnderlineIcon } from \"lucide-react\";\nimport { Toggle, ToggleGroup } from \"@nui/core\";\n\nexport default function ToggleGroupMultiple() {\n  return (\n    <ToggleGroup toggleMultiple>\n      <Toggle value=\"bold\">\n        <BoldIcon />\n      </Toggle>\n      <Toggle value=\"italic\">\n        <ItalicIcon />\n      </Toggle>\n      <Toggle value=\"underline\">\n        <UnderlineIcon />\n      </Toggle>\n    </ToggleGroup>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "toggle-outline",
    "name": "Toggle Outline",
    "description": "Toggle Outline component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "toggle-outline.tsx",
        "path": "toggle-outline.tsx",
        "content": "import { PinIcon } from \"lucide-react\";\nimport { Toggle } from \"@nui/core\";\n\nexport default function ToggleOutline() {\n  return (\n    <Toggle aria-label=\"Pin\" variant=\"outline\">\n      <PinIcon />\n    </Toggle>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "toggle-sizes",
    "name": "Toggle Sizes",
    "description": "Toggle Sizes component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "toggle-sizes.tsx",
        "path": "toggle-sizes.tsx",
        "content": "import { PinIcon } from \"lucide-react\";\nimport { Toggle } from \"@nui/core\";\n\nexport default function ToggleSizes() {\n  return (\n    <div className=\"flex items-center gap-4\">\n      <Toggle aria-label=\"Pin\" size=\"sm\">\n        <PinIcon />\n      </Toggle>\n      <Toggle aria-label=\"Pin\" size=\"default\">\n        <PinIcon />\n      </Toggle>\n      <Toggle aria-label=\"Pin\" size=\"lg\">\n        <PinIcon />\n      </Toggle>\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "toolbar-demo",
    "name": "Toolbar Demo",
    "description": "Toolbar Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "toolbar-demo.tsx",
        "path": "toolbar-demo.tsx",
        "content": "import { GlobeIcon, LightbulbIcon, SparklesIcon } from \"lucide-react\";\nimport {\n  Button,\n  Popover,\n  PopoverClose,\n  PopoverContent,\n  PopoverDescription,\n  PopoverFooter,\n  PopoverHeader,\n  PopoverTitle,\n  PopoverTrigger,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Textarea,\n  Toggle,\n  ToggleGroup,\n  Toolbar,\n  ToolbarButton,\n  ToolbarSeparator,\n} from \"@nui/core\";\n\nconst models = [\n  {\n    label: \"Select a model\",\n    value: null,\n  },\n  {\n    label: \"Grok 3\",\n    value: \"grok-3\",\n  },\n  {\n    label: \"Claude 3.7 Sonnet\",\n    value: \"claude-3.7-sonnet\",\n  },\n\n  {\n    label: \"GPT-4o\",\n    value: \"gpt-4o\",\n  },\n  {\n    label: \"04-mini\",\n    value: \"o4-mini\",\n  },\n];\n\nexport default function ToolbarDemo() {\n  return (\n    <Toolbar>\n      <ToggleGroup className=\"border-none bg-transparent p-0\" toggleMultiple>\n        <ToolbarButton\n          size=\"icon\"\n          render={\n            <Toggle\n              className=\"data-[pressed]:bg-green-950 data-[pressed]:text-green-200\"\n              aria-label=\"Show AI thinking\"\n              value=\"ai-thinking\"\n            >\n              <LightbulbIcon />\n            </Toggle>\n          }\n        />\n        <ToolbarButton\n          size=\"icon\"\n          render={\n            <Toggle\n              className=\"data-[pressed]:bg-blue-950 data-[pressed]:text-blue-200\"\n              aria-label=\"Use web search\"\n              value=\"web-search\"\n            >\n              <GlobeIcon />\n            </Toggle>\n          }\n        />\n      </ToggleGroup>\n\n      <ToolbarSeparator />\n\n      <Select items={models}>\n        <SelectTrigger className=\"w-40 md:w-52\">\n          <SelectValue className=\"truncate\" />\n        </SelectTrigger>\n        <SelectContent className=\"w-52\">\n          {models.map((model) => (\n            <SelectItem key={model.value} value={model.value}>\n              {model.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n\n      <ToolbarSeparator />\n\n      <Popover>\n        <ToolbarButton\n          size=\"icon\"\n          variant=\"outline\"\n          render={<PopoverTrigger />}\n          aria-label=\"Edit prompt\"\n        >\n          <SparklesIcon />\n        </ToolbarButton>\n        <PopoverContent className=\"w-80 space-y-2\">\n          <PopoverHeader>\n            <PopoverTitle>Edit Prompt Template</PopoverTitle>\n            <PopoverDescription>\n              Customize the system prompt used for AI generation\n            </PopoverDescription>\n          </PopoverHeader>\n          <Textarea\n            className=\"resize-none\"\n            defaultValue=\"You are a helpful AI assistant. Your task is to help the user with their writing needs. Be concise, accurate, and helpful.\"\n          />\n          <PopoverFooter>\n            <PopoverClose\n              render={<Button variant=\"outline\">Save Prompt</Button>}\n            />\n          </PopoverFooter>\n        </PopoverContent>\n      </Popover>\n    </Toolbar>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react"
    ],
    "path": ""
  },
  {
    "id": "toolbar-file-explorer",
    "name": "Toolbar File Explorer",
    "description": "Toolbar File Explorer component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "toolbar-file-explorer.tsx",
        "path": "toolbar-file-explorer.tsx",
        "content": "import {\n  LayoutGridIcon,\n  LayoutListIcon,\n  MoreHorizontalIcon,\n  SearchIcon,\n  ShareIcon,\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n  Input,\n  Toggle,\n  ToggleGroup,\n  Toolbar,\n  ToolbarButton,\n  ToolbarGroup,\n  ToolbarInput,\n  ToolbarSeparator,\n} from \"@nui/core\";\n\nexport default function ToolbarFileExplorerDemo() {\n  return (\n    <Toolbar>\n      <ToggleGroup className=\"border-none bg-transparent p-0\">\n        <ToolbarButton\n          size=\"icon\"\n          render={\n            <Toggle aria-label=\"Grid view\" value=\"grid-view\">\n              <LayoutGridIcon />\n            </Toggle>\n          }\n        />\n        <ToolbarButton\n          size=\"icon\"\n          render={\n            <Toggle aria-label=\"List view\" value=\"list-view\">\n              <LayoutListIcon />\n            </Toggle>\n          }\n        />\n      </ToggleGroup>\n\n      <ToolbarSeparator />\n\n      <ToolbarGroup>\n        <ToolbarButton size=\"icon\" variant=\"outline\">\n          <ShareIcon />\n        </ToolbarButton>\n        <DropdownMenu>\n          <ToolbarButton\n            size=\"icon\"\n            variant=\"outline\"\n            render={<DropdownMenuTrigger />}\n          >\n            <MoreHorizontalIcon />\n          </ToolbarButton>\n          <DropdownMenuContent>\n            <DropdownMenuItem>New File</DropdownMenuItem>\n            <DropdownMenuItem>New Folder</DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>Open in New Tab</DropdownMenuItem>\n            <DropdownMenuItem>Get Info</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </ToolbarGroup>\n      <ToolbarSeparator />\n\n      <ToolbarInput\n        render={<Input placeholder=\"Search\" leadingIcon={<SearchIcon />} />}\n      />\n    </Toolbar>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [],
    "path": ""
  },
  {
    "id": "tooltip-custom-position",
    "name": "Tooltip Custom Position",
    "description": "Tooltip Custom Position component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "tooltip-custom-position.tsx",
        "path": "tooltip-custom-position.tsx",
        "content": "import { Tooltip, TooltipContent, TooltipTrigger } from \"@nui/core\";\n\nconst positions = [\"top\", \"right\", \"bottom\", \"left\"] as const;\n\nexport default function TooltipCustomPosition() {\n  return (\n    <div className=\"grid grid-cols-2 gap-2\">\n      {positions.map((position) => (\n        <Tooltip key={position}>\n          <TooltipTrigger className=\"w-full rounded-md border px-2 py-1.5 text-sm\">\n            {position}\n          </TooltipTrigger>\n          <TooltipContent className=\"max-w-56\" side={position}>\n            <span>This tooltip is positioned at the {position} side.</span>\n          </TooltipContent>\n        </Tooltip>\n      ))}\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "tooltip-demo",
    "name": "Tooltip Demo",
    "description": "Tooltip Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "tooltip-demo.tsx",
        "path": "tooltip-demo.tsx",
        "content": "import { Twitter } from \"lucide-react\";\nimport {\n  buttonVariants,\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@nui/core\";\n\nexport default function TooltipDemo() {\n  return (\n    <Tooltip>\n      <TooltipTrigger\n        className={buttonVariants({ variant: \"outline\", size: \"icon\" })}\n      >\n        <Twitter />\n      </TooltipTrigger>\n      <TooltipContent>\n        <span>\n          Follow me{\" \"}\n          <a\n            className=\"font-medium\"\n            href=\"https://x.com/borabalogluu\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            @borabalogluu\n          </a>\n        </span>\n      </TooltipContent>\n    </Tooltip>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react"
    ],
    "path": ""
  },
  {
    "id": "tree-demo",
    "name": "Tree Demo",
    "description": "Tree Demo component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "tree-demo.tsx",
        "path": "tree-demo.tsx",
        "content": "import { FileIcon, FolderIcon } from \"lucide-react\";\nimport { Tree, useTree, type TreeNode } from \"@nui/core\";\n\nconst treeData: TreeNode[] = [\n  {\n    id: \"src\",\n    label: \"src\",\n    icon: <FolderIcon className=\"h-4 w-4\" />,\n    expanded: true,\n    children: [\n      {\n        id: \"components\",\n        label: \"components\",\n        icon: <FolderIcon className=\"h-4 w-4\" />,\n        expanded: true,\n        children: [\n          {\n            id: \"button.tsx\",\n            label: \"Button.tsx\",\n            icon: <FileIcon className=\"h-4 w-4\" />,\n            href: \"/components/button\",\n          },\n          {\n            id: \"input.tsx\",\n            label: \"Input.tsx\",\n            icon: <FileIcon className=\"h-4 w-4\" />,\n            href: \"/components/input\",\n          },\n        ],\n      },\n      {\n        id: \"pages\",\n        label: \"pages\",\n        icon: <FolderIcon className=\"h-4 w-4\" />,\n        children: [\n          {\n            id: \"index.tsx\",\n            label: \"index.tsx\",\n            icon: <FileIcon className=\"h-4 w-4\" />,\n            href: \"/\",\n          },\n          {\n            id: \"about.tsx\",\n            label: \"about.tsx\",\n            icon: <FileIcon className=\"h-4 w-4\" />,\n            href: \"/about\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: \"package.json\",\n    label: \"package.json\",\n    icon: <FileIcon className=\"h-4 w-4\" />,\n    href: \"/package.json\",\n  },\n];\n\nexport default function TreeDemo() {\n  const { data, selectedId, handleSelect, handleToggle, handleNavigate } =\n    useTree(treeData, {\n      onNavigate: (href: string, node: TreeNode) => {\n        console.log(\"Navigate to:\", href, node);\n      },\n    });\n\n  return (\n    <div className=\"w-full max-w-sm border border-border rounded-lg bg-background p-4\">\n      <h3 className=\"text-sm font-medium mb-3\">File Explorer</h3>\n      <Tree\n        data={data}\n        selectedId={selectedId}\n        onSelect={handleSelect}\n        onToggle={handleToggle}\n        onNavigate={handleNavigate}\n        aria-label=\"File explorer tree\"\n      />\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  },
  {
    "id": "tree-variants",
    "name": "Tree Variants",
    "description": "Tree Variants component demo",
    "category": "component",
    "type": "component",
    "updatedAt": "2025-10-25T17:09:40.245Z",
    "files": [
      {
        "name": "tree-variants.tsx",
        "path": "tree-variants.tsx",
        "content": "import { FileIcon, GitBranchIcon } from \"lucide-react\";\nimport { Tree, useTree, type TreeNode } from \"@nui/core\";\n\nconst gitTreeData: TreeNode[] = [\n  {\n    id: \"main\",\n    label: \"main\",\n    icon: <GitBranchIcon className=\"h-4 w-4\" />,\n    expanded: true,\n    children: [\n      {\n        id: \"feature-auth\",\n        label: \"feature/auth\",\n        icon: <GitBranchIcon className=\"h-4 w-4\" />,\n        children: [\n          {\n            id: \"login.tsx\",\n            label: \"login.tsx\",\n            icon: <FileIcon className=\"h-4 w-4\" />,\n            badge: \"M\",\n          },\n          {\n            id: \"signup.tsx\",\n            label: \"signup.tsx\",\n            icon: <FileIcon className=\"h-4 w-4\" />,\n            badge: \"A\",\n          },\n        ],\n      },\n      {\n        id: \"hotfix-styles\",\n        label: \"hotfix/styles\",\n        icon: <GitBranchIcon className=\"h-4 w-4\" />,\n        children: [\n          {\n            id: \"styles.css\",\n            label: \"styles.css\",\n            icon: <FileIcon className=\"h-4 w-4\" />,\n            badge: \"M\",\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default function TreeVariants() {\n  const { data, selectedId, handleSelect, handleToggle, handleNavigate } =\n    useTree(gitTreeData, {\n      onNavigate: (href: string, node: TreeNode) => {\n        console.log(\"Navigate to:\", href, node);\n      },\n    });\n\n  return (\n    <div className=\"w-full max-w-sm border border-border rounded-lg bg-background p-4\">\n      <h3 className=\"text-sm font-medium mb-3\">Git Branches</h3>\n      <Tree\n        data={data}\n        selectedId={selectedId}\n        onSelect={handleSelect}\n        onToggle={handleToggle}\n        onNavigate={handleNavigate}\n        aria-label=\"Git branches tree\"\n      />\n    </div>\n  );\n}\n",
        "language": "typescript"
      }
    ],
    "dependencies": [
      "lucide-react",
      "@nui/core"
    ],
    "path": ""
  }
]